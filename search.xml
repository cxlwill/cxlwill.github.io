<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Welcome]]></title>
    <url>%2Fother%2FWelcome%2F</url>
    <content type="text"><![CDATA[欢迎来到墨澜的技术博客，生活博客请前往 墨澜生活站。本站采用国内外分流。全站文章未经授权，禁止以任何形式的转载、摘录、汇编等发布于论坛、网站、贴吧、微博等公共平台与私人博客中。特别是“瀚思彼岸”论坛，我有账号并保持一定活跃度，如果我要分享，会自行发帖，无须代劳。]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 中文文档上线]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Chinese-docs%2F</url>
    <content type="text"><![CDATA[经过再三的斟酌，我决定制作这么一份接地气的 Home Assistant 中文文档。 文档地址是：https://home-assistant.cc，欢迎大家阅读及收藏。 较于英文文档，这份文档将实现： 摒弃英文文档反人类的结构，采用更直观清晰，符合中文阅读的展现形式； 剔除大量国内用户这辈子都不可能用到的组件说明，提高常用平台的层级和权重； 着重添加实际操作的指导； 跳出 Home Assistant 的框架，这份文档还将一并纳入 Floorplan、HADashboard、Homebridge-homeassistant 等其他 HA 相关的内容，让你实现一站搞定 Home Assistant 的梦想； 国内开发者自制的自定义组件指南，间接鼓励开发者开发。 出于我对翻译及成文质量的精神洁癖，目前本文档由我独立制作更新，所以进度有些迟缓。欢迎有能力、有闲时、有热情的朋友加我微信『cxlwill』沟通。 当然，偏爱官方展现形式的用户，可以选择浏览同样由我参与翻译，仍将保持更新的“瀚思彼岸”论坛的中文文档。 最后，我想说， Home Assistant 作为开源平台，势必会吸引很多利益方的眼球。大家都知道国内的开源环境和知识产权保护环境有多么的糟糕，随着平台的发展，未来相关的中文网站及社区肯定也会层出不穷，恶性竞争在所难免。作为简简单单的爱好者，我还是希望能够保证平台的纯净性，也期待见证更多的优秀的积极向上的平台。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列高级篇 - 高德地图接入]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Map%2F</url>
    <content type="text"><![CDATA[2017.11.16 修改：更新替换文件地址和地图图层 URL。 这一次的教程呢就先聚焦一下『地图』吧。我们知道 HA 默认的地图面板使用的是 OpenStreet 地图，社区内大部分的组件也是基于 Google Map 开发优化的。这可苦了我们墙内的小伙伴，必须全部替换掉。 至于替换后所考虑使用的国内地图服务商，我这里还是推荐『高德』。众所周知，由于特别的保密政策及『地图法』，我国的地图坐标系都是加密后的数据，在这种情况下，大家常用的百度地图使用的是百度特有的 BA09 坐标系，在我们实际接入中会产生较大的地图偏移，所以弃用之。那剩下的就只有高德、腾讯这么 2 个选择了，摸摸良心也知道选高德是没错的。 在 HA 上显示地图，一种方法呢是通过 Panel 面板，另外一种是通过 Card 卡片，两种方法我一并介绍。 面板使用面板将『高德地图』接入 HA，一种方法是直接替换掉原有地图面板的底层地图，另一种方法是接入自定义面板。前者需要在 HA 每次更新后替换源文件，后者则要忍受左侧栏有 2 个地图面板入口，可以说都不是那么完美。权衡再三我还是选择直接替换源文件，毕竟 HA 更新没有那么的频繁。 打开默认的『Map』页面，我们不难从右下角标注部分发现其使用的是『leaflet』框架，有关该框架的具体介绍我就不展开了。简单来说，它的运行原理就是提供一张底图图层，之后在上面增加标记图层。因此，我们只需要把底图替换为『高德地图』就 OK 了。 注意：该步操作涉及源文件修改，有一定风险，请谨慎操作，我不承担任何责任。 首先，打开『地图』页面的源文件，如果你是通过虚拟环境安装 HA 的，那么源文件路径在: 1/srv/homeassistant/homeassistant_venv/lib/python3.5/site-packages/hass_frontend/panels 先使用格式化工具进行格式化，找到图层相关的语句： 12345678910attached: function() &#123; var t = this._map = window.L.map(this.$.map); t.setView([51.505, -.09], 13), window.L.tileLayer("https://cartodb-basemaps-&#123;s&#125;.global.ssl.fastly.net/light_all/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png").addTo(t), this.drawEntities(this.hass), this.async(function() &#123; t.invalidateSize(), this.fitMap() &#125;.bind(this), 1) &#125;, 将 window.L.tileLayer 中图层路径部分 https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png 替换为高德地图 URL，之后保存文件； 接着，在终端内使用 gzip 指令压缩 html 文件，替换源 html 与 html.gz 文件； 再次，使用 md5 指令获取 html 文件的 md5 值，打开上上级文件夹内的 __init__.py 文件，替换 &quot;panels/ha-panel-map.html&quot;的值； 最后，大功告成，重启 HA 即可，你可以看到『Map』页面的地图已经变为了高德地图。 最后的最后，我知道你们很懒又迷茫，给你们提供了现成的文件，直接进行替换即可。 文件地址请扫码捐款后获得 ……………… 好啦，没那么夸张，点此前往。 卡片使用卡片将『高德地图』接入 HA，我们这里需要利用『Genric』这个组件，将地图转化为摄像头画面。 首先，申请高德开发者账户，新建应用，获取 API 接口秘钥『key』。 接着，仔细阅读该份静态地图 技术文档，了解各项值代表的意义和表示方法。 最后，打开 configuration.yaml 添加 Generic 组件： 123456#高德地图camera: name: Home platform: generic still_image_url: http://restapi.amap.com/v3/staticmap?location=地图中心经度,地图中心纬度&amp;zoom=14&amp;scale=2&amp;size=305*185&amp;traffic=1&amp;&amp;labels=家,0,0,35,0xFFFFFF,0x5288d8:标记经度,标记纬度&amp;key=秘钥 limit_refetch_to_url_change: false 重启 HA 后，你想要显示的地图区域就会以『卡片』的形式展现在前端中了。 我知道你们还是又懒又迷茫，因此，提供了 示例配置，这也是我的所有配置的同步仓库。 到这里，相信大家可以自如地在 HA 中使用高德地图了，还不拿起手机扫一扫下方的捐款码吗？ （从未见过如此厚颜无耻之徒） ￣ω￣=]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[高德地图瓦片深探]]></title>
    <url>%2Ffrontend%2FGaodeMap%2F</url>
    <content type="text"><![CDATA[上个月在 Home Assistant Polymer 的 Github 里看到了有关指定地图瓦片图层 URL 的 PR，还小高兴了一把。但是，本周发现 PR 被撤了，真是悲从中来。不过撤归撤，我还是决定细看一下地图相关的内容。 瓦片地址结合 CSDN 上的内容，目前通过高德地图瓦片分为新旧 2 版，分别为： 新版： http{s}://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=7 为矢量图（含路网、含注记） http{s}://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=7 为矢量图（含路网，不含注记） http{s}://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=6 为影像底图（不含路网，不含注记） http{s}://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=6 为影像底图（不含路网、不含注记） http{s}://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=1&amp;style=8 为影像路图（含路网，含注记） http{s}://wprd0{1-4}.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scl=2&amp;style=8 为影像路网（含路网，不含注记） 旧版： http://webst0{1-4}.is.autonavi.com/appmaptile?style=6&amp;x={x}&amp;y={y}&amp;z={z} 为影像底图（不含路网，不含注记） http://webst0{1-4}.is.autonavi.com/appmaptile?style=7&amp;x={x}&amp;y={y}&amp;z={z} 为矢量地图（含路网，含注记） http://webst0{1-4}.is.autonavi.com/appmaptile?style=8&amp;x={x}&amp;y={y}&amp;z={z} 为影像路网（含路网，含注记） 2 个版本的缩放等级均在 3 - 19，移动终端设备默认为 3 - 19，web 界面默认为 3 - 18。配合 expandZoomRange 参数，可以扩大到 3 - 20（详见 高德地图参考手册） HTTPS高德的 API 已经全面支持 HTTPS 了，也算是大势所趋吧。同样的新版图层 URL 也支持 HTTPS，这也是为什么我推荐使用新版图层的原因。如果你的 Home Assistant 已经 https 化了，使用 HTTP 的图层将导致出现『不安全』提示。 纠偏纠偏这个工作，瀚思彼岸论坛上已经有大神给出了。我这里再重新捋一遍。 国际标准的经纬度坐标是 WGS84，使用者 Google Earth、海外 Google Map、OpenStreet…… 腾讯、高德、天地图使用 GCJ-02，俗称“火星坐标”，加密转换一次，但是瓦片坐标系与 WGS84 相同； 百度使用 BD-09，在瓦片坐标系与前述 2 者 完全不同的情况下，再进行加密转换。 所以大家可以理解为什么我一直不提倡用『百度地图』了，这货就是反人类来的，不按基本法。Apple 在国内的地图供应商为什么选择高德，大家也可知一二了。 另外再提一句，除非缩放等级到达 16 及以上，否则这个偏移在地图上看是看不太出来的。但是，如果运用于坐标系相关的应用，比如局面地图数据的可视化、设定地理围栏等等，就非纠正不可了。 纠偏方法还是挺多的： python：https://github.com/wandergis/coordTransform_pyJS： https://github.com/wandergis/coordtransform]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[D3.js&Billboard.js]]></title>
    <url>%2Ffrontend%2Fd3%2F</url>
    <content type="text"><![CDATA[最近心血来潮研究起 D3，在逛 Home Assistant 前端的 Github 的时候发现有一位大神打算使用 D3 + Billboard.js 取代现有的 Google Chart 服务。这当然是造福祖国人民的好操作，定睛一看大神果然是自己人 = =。顺便就去看了下 Billboard.js 究竟为何。 Billboard.js 原来之前是 C3.js 的一个 Fork，现在独立出来改为支持 D3 v4了。对你没有听错，这货支持 D3 的 V4，简直是时代先锋。简单来说 Billboard 就是调用自家的 CSS 和 JS，快速生成简单图表。 当然，既然框架用的是 d3，更繁杂的设置都是支持的。支持的图表数量也不少： 比起原生框架，Billboard 的优势是能减少很多 DOM 操作。不过老实说还不成熟，个人站点或者中小项目可以尝试用用。]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[网络分析工具 mtr 使用]]></title>
    <url>%2Fother%2Fmtr%2F</url>
    <content type="text"><![CDATA[前几天，海外租用的 VPS 延迟严重，亏我还购买了针对东亚的 IP，无奈申请关闭退款。结果对方客服发邮件过来让我使用 mtr 工具，反馈一下网络情况。我也是才了解到这么一个工具。 mtr 安装起来很简单，macOS 有 homebrew 的话 直接 brew install mtr就完成了。Linux 上更是简单，用 yum 和 apt-get 都可以直接安装，工具本身也非常轻量。 安装之后，直接指令 mtr ip 就可以了，进程启动后会持续不断地 Ping。之所以喜欢这个工具是展示界面非常清楚明了，操作也非常简单，单键的字母快捷键解决一切： 可以看到时延基本都 150+ 了，特别 IP 看来没发挥多大的作用。还有一些其他的指令，通过 mtr -h 可以详查。]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列高级篇 —— 日落日出时间]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Date%2F</url>
    <content type="text"><![CDATA[入秋以后，天暗得很早，早早没了阳光，收衣服的时间也比原先提早了。因此想在前端了解一下日落时间，最终显示的效果就是这样： 老样子，还是要用 Template Sensor 接入，利用系统自带的sun.sun组件的属性： 12345- platform: template sensors: sunrise: value_template: '&#123;&#123; ((as_timestamp(states.sun.sun.attributes.next_rising)) | timestamp_local) [11:16] &#125;&#125;' friendly_name: '日出时间' 重点当然就是 value_template 这段了，其实我这里偷了一个懒，直接指定了时间格式的模板（日落日出没人需要年月日的），最规范的格式化应该是： 1&#123;&#123; as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom(&quot;%H:%M&quot;) &#125;&#125; 显示出的日期格式是 24 小时制的 14:10 ，如果要显示 7:10 没有十位数 0 的时间，只要把 (&quot;%H:%M&quot;) 替换成 (&quot;%-H:%M&quot;). 如果想使用 12 小时制，则把(&quot;%H:%M&quot;) 替换成 (&quot;%I:%M&quot;) 或者 (&quot;%-I:%M&quot;) 。当然使用 12 小时制度的话，可能需要显示 AM/PM。也很简单，末尾加个 p 变成 (&quot;%I:%M %p&quot; ) 就可以了。 更具体的时间表示方法可以直接 check 技术文档。 还有一点重要的是在接入前务必记得更改系统时区，否则你就使用系统默认的格林尼治时间吧，太阳晚上十点才升起呢 ：）。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列超神篇 - 3D 动态平面图]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-floorplan3D%2F</url>
    <content type="text"><![CDATA[还在不断完善中……]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[树莓派 Raspbian Stretch 安装 OpenCV 指南]]></title>
    <url>%2FRaspberrypi%2Fraspbian-stretch-opencv%2F</url>
    <content type="text"><![CDATA[OpenCV 对于研究 AI 的朋友肯定不陌生了，相信不少人在其他系统的主机上跑起来了。树莓派由于性能受限，一直不被看作适合 OpenCV 的平台。诚然，小派跑起 OpenCV 确实吃力了一些，但是并非完全不可能跑。本篇教程所展现的内容就是一个尝试，需要注意的是树莓派的性能问题并不能通过软件解决，因此请大家做好运行迟缓的内心准备。 以下教程内容参考了 Pyimagesearch。建议有英文基础的同学前往该网站学习。当然文章不是纯翻译，还是会掺和一些自己的私货，比如如何在 Home Assistant 当中接入 OpenCV 呢？~ 安装背景：一块装有 Raspbian Stretch 的树莓派（最好是全新纯净安装），熟悉基本的 SSH、VNC 等操作。（都玩到 OpenCV 了，相信不用我再多说这些知识了） 文件系统扩容开头也提到了小派的空间有限，因此第一件事就是将系统扩大到整块 TF 卡的空间。 终端输入 sudo raspi-config —— Advanced Options —— Expand filesystem ——A1. Expand File System，之后 sudo reboot 重启。 重启后，可输入 df -h，检查是否扩容完毕。 俗话说“巧妇难为无米之炊”，都要人工智能了，还是别拿 4G、8G 的小卡折腾了，个人推荐 16G 及以上 TF 卡。要是你非用小卡不可，想要压缩空间，可以把部分系统自带的软件卸载掉，比如 Libreoffice 和 Wolfram 之类的，前提是你确定不使用这些软件。 1234sudo apt-get purge wolfram-enginesudo apt-get purge libreoffice*sudo apt-get cleansudo apt-get autoremove 安装依赖包磨刀不误砍柴工，最麻烦的一个步骤来了。老样子，开始操作前务必记得更新源和包： 1sudo apt-get update &amp;&amp; sudo apt-get upgrade 这里再次提醒一下，国内的朋友最近换源就不要使用大学的源了，阿里云和豆瓣都可以。另外如果是从 Jessie 升级上来的务必记得把源改成 Stretch。 下面正式开始安装流程： cmake：sudo apt-get install build-essential cmake pkg-config 图片处理依赖：sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev 视频处理依赖： 12sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-devsudo apt-get install libxvidcore-dev libx264-dev GUI：sudo apt-get install libgtk2.0-dev libgtk-3-dev 其他：sudo apt-get install libatlas-base-dev gfortran Python，系统默认已经安装了，这里是一些头部文件：sudo apt-get install python2.7-dev python3-dev pip，你们真的没装吗？ 123wget https://bootstrap.pypa.io/get-pip.pysudo python get-pip.pysudo python3 get-pip.py 下载源码这里抓取下载的是最新版本 3.3.0，日后有新版本更新也可以更换版本号。 123456789cd ~wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.3.0.zipunzip opencv.zip``` 因为安装的是完整功能版本的 OpenCV，因此还要下一个带有附加模块的普通发行版：``` terminalwget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.3.0.zipunzip opencv_contrib.zip 注意：源码和发行版的版本号要一致。 虚拟环境原作者本人非常提倡在 Python 虚拟环境中安装运行 OpenCV，毕竟库大又杂，不太好影响生产环境。这个问题我个人觉得是见仁见智了，正是因为虚拟环境完全独立于原生 Python 环境，如果要编译一些全局项目的话，反而不方便。我这里就选择跳过这段了。 安装有 Home Assistant 的朋友可以考虑进入 HA 的虚拟环境中安装 OpenCV，也方便日后接入 HA 的时候调用库。不过操作前千万 记得备份 ！！！ 12sudo su -s /bin/bash homeassistantsource /srv/homeassistant/homeassistant_venv/bin/activate 安装 NumpyNumpy 是强大的 Python 库，即使不装 OpenCV，如果你要研究研究大数据、可视化等等我个人也是非常推荐安装的。注意如果使用了虚拟环境，一定要进入虚拟环境才安装，否则无法生效。 1pip install numpy 因为库挺大，所以安装要挺久的，可能会出现假死现象，不要怕，它真的在装。 安装 OpenCV铺垫了那么久，终于到重点了。安装前我们必须编译一下 OpenCV： 12345678cd ~/opencv-3.3.0/mkdir buildcd buildcmake -D CMAKE_BUILD_TYPE=RELEASE \ -D CMAKE_INSTALL_PREFIX=/usr/local \ -D INSTALL_PYTHON_EXAMPLES=ON \ -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.3.0/modules \ -D BUILD_EXAMPLES=ON .. 认真 check 一下安装的路径，然后大胆地敲键盘吧： 1make 大约耗时 4+ 小时，不骗你，就是要那么变态的久。 要是中间出错了，没事，咱们喘口气再来 &gt; &lt;： 12make cleanmake 成功后，就是正式安装了： 12sudo make installsudo ldconfig 如果你使用 Python 3 环境安装的话，最后的文件名会抽疯，我们需要改一下： 12cd /usr/local/lib/python3.5/site-packages/sudo mv cv2.cpython-35m-arm-linux-gnueabihf.so cv2.so 然后我们对接一下： 12cd ~/cv/lib/python3.5/site-packages/ln -s /usr/local/lib/python3.5/site-packages/cv2.so cv2.so 最后，我们来检验一下： 123python&gt;&gt;&gt; import cv2&gt;&gt;&gt; cv2.__version__ 不出意外的话，屏幕上应该会显示出 3.3.0 了。 大喜过后，清理安装包，腾出空间：rm -rf opencv-3.3.0 opencv_contrib-3.3.0 接入 Home Assistant打开 configuration.yaml，填入如下配置： 1234567image_processing: - platform: opencv name: Front Door Faces source: - entity_id: camera.front_door //连接的摄像头组件 classifier: mom: /path/to/classifier.xml //分类器 默认会从 Github 上下载预设的分类器，你也可以从 这里 下载现成的。当然你也可以自己训练接入。如果你是自己训练的话，最下面一行的配置可以展开： 12345mom: file: /path/to/classifier/xml neighbors: 4 //容错 min_size: (40, 40) scale: 1.1f //比例 如果你想在摄像头的实时画面中看到 OpenCV 的识别区域，就是我们常在电视或者美颜相机上看到的那个定位框，你可以到 这里 下载自定义组件，把 opencv.py 放进 custom_components 文件夹下，然后在 configuration.yaml 添加配置： 1234567camera: - platform: opencv camera: camera.front_door //连接的摄像头组件 processor: image_processing.front_door_opencv_faces //上面的 OpenCV 的 entity ID # Optional Parameters name: OpenCV Camera `]]></content>
      <categories>
        <category>Raspberrypi</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列提高篇 - 外网安全访问]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-https%2F</url>
    <content type="text"><![CDATA[Home Assistant 本身为外网访问提供完整的 Let’s Encryption + Duck Dns 支持，但是基于国内的网络环境，个人不太推荐。一是前者的加密需要每 3 个月进行更新，虽然有自动更新脚本和组件，但心里始终挂着一件事不舒服；二是国内网络运营商基本上封闭了 80 端口，后者直接 NG。 因为众所周知的原因，国内进行端口转发、内网穿透、端口映射甚至是公网 IP 设置都障碍重重，所以很多外文教程并不适用于国内的网络环境。下面我就结合本人的实际用网情况介绍一下简单的外网访问，当然适用背景必须先声明一下。 背景 家庭电信宽带，有公网 IP。公网 IP 的供应情况各地各运营商的操作不一样，我这里是直接去电 10000 号就马上开通了，每周更新一次 IP。固定公网 IP 基本上是商务账户才享有的，因此我们后面需要用到 DDNS 功能。当然，其他地方的小伙伴可能在获取公网 IP 上会比较波折，简单来说流程就是这么走的：去电运营商 —— 换高级客服 —— 换技术客服 —— 投诉 ——工信部 ——客户经理回访。最后的结果有可能就是撕逼成功，获得公网 IP，有时候会通过把你账户转成商务账户实现，最糟糕的就是撕逼失败。这种情况下，要么换运营商，要么只能内网穿透。 80端口封闭，443 端口开放。目前基本上所有运营商都关闭了家庭宽带的 80 端口，443、8080等端口的开放情况各地各运营商操作不尽相同。如果像我这样能有 443 端口就非常完美了，因为 443 端口是 https 的默认端口，映射之后访问不需要在域名后面添加端口号，适合强迫症使用。如果几个端口都封了的话，老实说，除了内网穿透，我也没有办法了。 无内网穿透。特别提出来这点是因为很多人小区宽带被层层捆绑。目前内网穿透没有什么好的免费方法，要么使用『花生壳』，但是给的域名超垃圾还要设置域名跳转，端口号也有限制，要么使用『Frps』，但是你也得有个服务器。 华硕路由器 + 梅林固件。选择梅林固件主要是有 『阿里云 DDNS 插件』，方便操作。当然，手动提交其实也是没有问题的。端口转发的话，基本上所有路由器固件都自带，无需担心。 HA 加密且无摄像头接入。我个人是绝对不会把摄像头暴露在公网中的，或者说，我至今不考虑购置家用监控摄像机。我相信看了几季的《犯罪心理》，大家也会和我有一样的看法。没有一个摄像头是安全的，而且犯罪成本低，犯罪收益相当大。你可以试想一下你的生活轨迹，家庭情况瞬间暴露在外。当然，室外监控和店铺使用的朋友可以忽略此项。 背景介绍完，就正式开始流程吧。 申请域名首先登陆『阿里云』进入域名购买界面，在国内购买 cn/com 域名必须进行实名认证。当然不愿意的你也可以选择其他的域名供应商，例如 Godaddy 等，这里选择万网的原因是方便接下去 CA 证书的申请，一条龙服务舒心。这里强烈不推荐在诸如『花生壳』等其他国内域名交易商购买注册域名，各种限制，尽是坑货。 申请证书阿里云的『云盾证书服务』对个人站提供免费的 一年期 CA 证书，一个账户可以申请 5 份免费证书。 免费证书实际上是由『赛门铁克』颁发的，如果你使用万网的域名，只要在签发过程中选择自动认证即可。手动认证的方法也很简单，前往域名解析页添加一段 TXT 记录 即可。 证书签发后，我们就可以下载相关的证书了。如果你是使用 Nginx 或者 Apache 的话照指南下载调用即可，拿不准的话就选择『其他』下载。一般情况下可以下载到如下 3 个文件： xxxx.pem 公钥文件 xxxx.key 私钥文件 xxxx.chain 证书链文件 前 2 者必须有，后者可有可无。到这里我们的前期准备就基本完成了，接下来是一系列的路由器操作。 DDNS有了域名之后，我们就要将其解析到家中的公网 IP，才能实现外网访问。如背景中所述，目前大部分的家庭宽带用户只有动态的公网 IP，而我们不可能每次都手动修改解析，因此需要 DDNS 这一动态解析工具。 从插件中心下载安装 ALIDDNS 插件，填入以下设置： app key 和 secret 从 阿里云账户详情里面获取，检查时间可以设置得大一些，毕竟 IP 更换得不是那么勤。 设置完毕后你就可以通过这个域名访问该 IP 下的服务了，如果你在路由器的『系统管理』中打开了『从互联网设置路由器』的话，那么现在你就可以通过访问 域名+端口号 进入路由器设置面板了。 SSL 证书验证华硕路由器自带的 Ai Cloud 功能默认使用 https 服务，并支持上传证书，可以简便地帮助我们验证证书的有效性。 完成上述 DDNS 服务之后，点击进入 Ai Cloud 个人云面板，便会显示你的个人云访问地址： 当然最后的端口号是可以更改的。点击网址进入后，选择左下角的设定 - 证书 -汇入证书，依次上传下载的 3 个文件。之后保存退出，刷新网页，不出意外的话，你的地址左侧将会出现 绿钥匙图标。这说明你的证书是安全有效的。我们可以放心地将其用在 HA 中了。 端口转发既然要做到外网访问，就必须把内网的服务映射到外网，在这里就是所谓的进行端口转发。我的 HA 使用的是默认端口 8123，我们前往 外部网络 - 端口转发 中添加如下规则： 你可以将『通信端口范围』更改成其他外网访问的端口，443 是 https 的默认访问端口。 至此，所有的铺垫工作都完成了，我们正式将 HA 映射到外网中。 HA https打开 configuration.yaml 文件，配置 http 项： 123456789http: api_password: !secret http_password //访问密码 trusted_networks: //免密登陆白名单，建议添加内网地址 - 127.0.0.1 - ::1 - 192.168.50.0/24 base_url: www.cxlwill.pub //访问地址，填入 DDNS 中设置的网址 ssl_certificate: /home/homeassistant/.homeassistant/cert.pem //公钥文件地址，注意放在有读取权限的文件夹 ssl_key: /home/homeassistant/.homeassistant/cert.key //私钥文件地址，注意放在有读取权限的文件夹 之后重启 HA，你会发现之前的 http://IP:8213 无法登陆了。请将访问地址更改为 https://域名:端口号，如果设置为 443 端口，则无需端口号。 现在你的 HA 已经可以完美进行外网的登陆了，并且在浏览的地址栏左侧你可以看到令人安心的绿钥匙图标。 HB、HADashboard 等相关服务HA 进行全站 https 后，千万记得更改相关服务的访问地址。 HB 中的 config.json ： 123456789&quot;platforms&quot;: [&#123;&quot;platform&quot;: &quot;HomeAssistant&quot;,&quot;name&quot;: &quot;HomeAssistant&quot;,&quot;host&quot;: &quot;https://&quot;, //修改为最新的域名，注意使用 https•••&quot;verify_ssl&quot;: false //建议使用 false&#125;], 之后重启 HB，无响应的状况应该就消失了。 HADashboard 中的 Appdaemon.yaml： 123HASS: ha_url: https://xxx.com //这里也要更改为最新的地址 ha_key: 其他使用 HA API 的服务，例如 IFTTT 中的调用地址也需要进行即使更新，具体就不展开了。 同样，iOS app 中的访问地址也需要一并进行更改。 后续注意事项 HA 全站 Https 之后，所有接入的服务都必须为 https，否则将会出现不安全的警示。请特别留意一些自定义组件的 API 和图标源，官方的组件一般情况下不会出现此类情况。RTSP 等协议不受影响。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Raspbian-Stretch]]></title>
    <url>%2FRaspberrypi%2Fraspbian-stretch%2F</url>
    <content type="text"><![CDATA[非常不幸地，由于我忘记（懒惰）及时清除 Pi Camera 的缓存，导致 TF 卡爆了，小派一启动就死机。解决的方法也不是没有，想了一下，干脆格一张容量更大的卡出来，重新刷系统罢了。 当然，做这个决定不是拍脑瓜，其实我早就蠢蠢欲动了。一来最近指导大家新装 HA，各种奇葩的问题层出不穷，我觉得我需要亲自再来体验一下；二来原系统确实被我装了无数乱七八糟的东西，是时候好好清理一下了；三来之前一直捏着 Node.js 7.X 版本，总是要升到 8.X 的。综上考虑，还是升了吧~ 目前，新的小派已经累计运行一周有余了。所有开启的服务包括 HA，HB以及 Magic Mirror 全部正常运转。鉴于此，我可以很妥地建议大家，升级系统吧！]]></content>
      <categories>
        <category>Raspberrypi</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[你的家焕然一新 —— 细述 iOS 11 中 的 Homekit]]></title>
    <url>%2FApple%2Fios11-homekit%2F</url>
    <content type="text"><![CDATA[iOS 11 于 9 月 20 日如期而至，相信不少人正琢磨着其在 iOS 设备上的新颖之处。对于智能家居爱好者而言，此次版本更新同样给 Homekit 带来了不少变化，下面让我们来一探究竟： 更丰富的自动化Apple 在 iOS 11 的 『家庭』自动化设置中增加了 『日出、日落』、『用户位置』等触发条件，现在你可以设置在某一特定的时间点根据家庭内成员的位置情况，触发设备动作。比如，设定在日落归家后，开启电灯： 更高的自由度对比之前千篇一律的图标，现在用户可以切换灯具等设备的默认图标了，恒温器在不同模式下也会显示不同的图标颜色，帮助用户快速识别设备： 虽然内置图标的数量还是有点少，但是也是一个不错的尝试。 更快的响应速度在 iOS 10 中，设备的响应需要依托于『家庭中枢』传递信息。而在 iOS 11 中，设备在状态发生变化时将主动加密推送数据，不再需要『家庭中枢』的协助。由于少了一步，设备响应延迟大大降低，现在『家庭』能够更迅速地回馈当前的设备状态及执行动作，配合上 Siri，甚至能做到“音未落，身已行”。 更便捷的配对iOS 10 中，添加智能设备只有扫描或手动输入『数字代码』这一选择，识别成功率受所在环境的亮度和字迹的清晰度影响。Apple 在 iOS 11 中终于充分利用起 NFC 近场通信，能够做到无线快速识别添加，再也不用举着手机到处扫码了。 更低的接入门槛Apple 的智能家居生意碍于 MFi 认证的门槛一直没有达到理想的市场覆盖度，白白浪费了 iPhone 和 iPad 庞大的用户量。此次 iOS 11 更新，Apple 终于做出了让步，降低了设备接入 Homekit 的门槛。根据最新《HomeKit Accessory Protocol Specification》，非商用设备不再需要传统的 MFi 硬件许可，可以直接通过软件授权接入 Homekit。唯一代价就是非 MFi 设备在接入 Homekit 时将会出现一行警告信息。 这一政策将大大激发开发者的积极性，降低开发成本，现在你的项目不需要手忙脚乱地干等着 MFi 认证通过才可以启动 Homekit 接入测试了。同时，这对智能家居爱好者来说也是一个福音。在 Amazon Alexa 和 Google Assistant 都开放 SDK 的情况下，Apple Homekit 依托『软认证』也能绕道在开发板上大放光彩了。 尽管商用智能家居设备依旧要通过 MFi 硬件认证才可以投放市场，但是从『软认证』的开放可以看出面对 Amazon 和 Google 两座大山，Apple 有些压力了。希望能借此弯道超车，为 11 月 Homepod 的发售做好铺垫。 目前，Apple Homekit 的智能家居设备在国内的智能家居市场并不普及。一方面由于 Siri 中文语音交互的短板，另一方面则是高昂的 MFi 认证成本。iOS 11 此番对 Homekit 的更新，能否帮助 Apple 在米家、京东微联、阿里智能打得火热的中国智能家居市场分得一杯羹，我们拭目以待。]]></content>
      <categories>
        <category>Apple</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列高级篇 - 动态平面图]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Floorplan%2F</url>
    <content type="text"><![CDATA[手机党直达链接：https://www.bilibili.com/video/av14441514/]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列补充篇 - 改造花花草草监测仪]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-miFlora%2F</url>
    <content type="text"><![CDATA[从小到大没养活过几个生物的我，这几天想着再拼一把试试看养养花。选来选去挑中好养的绿植类植物，但是花有了心里却没底，凑巧小米活动抽中了30元配件券，于是就入手了花花草草监测仪。 花花草草监测仪一共有 2 款 3 种型号，分别是白色柄的初版和国际版以及豆绿色柄的加强版。我研究了一下参数，加强版除了可以记忆多个植物以外，真没发现加强在哪里。既然如此，那还是入手 49 元的普通版吧。需要注意的是，由于未知的原因（App 需要向国内服务器发送数据），祖国版监测仪不能在国外使用。 此款监测仪一共监测 4 项数据，亮度，湿度，温度以及肥力。最后的这个肥力实际上是通过计算导电性得来的，也是监测仪类似磁铁的两极造型的由来。 实际使用中，原生体系有以下几个致命缺点： 夜晚模式下，app 的 UI 变了，但是依据提示光照不足，很不科学； 植物缺水状态下没有消息推送，只能靠用户定期查看 App 获知； 缺乏植物个性化的设定，App 对所有植物划分同样的缺水、少肥线等，忽视了部分植物喜光、耐热的特性。 设备使用蓝牙传输信息，手机一远离监测仪就无法获取数据，远程感知无法实现。（比如出差在外，提醒家中其他人帮忙浇水等场景） 只要是小米生态链下的设备，注定是要接入 HA 的，好在 HA 原生支持此款监测仪，工作顿时轻松了许多，打开安卓手机蓝牙设置，搜寻到设备，记录下 mac，之后在 HA 中的 Configuration.yaml 填入下列配置： 123456789101112sensor: - platform: miflora mac: 'xx:xx:xx:xx:xx:xx' name: Flower 1 #昵称 force_update: false #数据未变化时强制推送数据 median: 3 #取值范围 monitored_conditions: #监测数据类型 - moisture #湿度 - light #光照 - temperature #温度 - conductivity #肥力（土壤导电性） - battery #电量 再添加一些自定义配置，重启 HA，当当，监测仪的监测数据就出现在界面了。 由于盆栽摆在室外，因此温度和亮度都可视为室外亮度和温度，正好与室内的温湿度传感器对比，让自己对增减衣物有个底。 当然光显示数据是不够的，我们的重点在解决问题。 问题一：异常情况提醒 结合 HA 的 iOS 和 notify 组件，我们可以自己来编写一段自动化设置，让系统在盆栽缺水时消息推送至 iPhone，提示我们浇花，弥补原生 App 的不足。 同时，配合魔镜的活点地图，做到缺水、缺肥时，数值闪动，平常照镜子的时候就能及时发现。 问题二：区分昼夜环境 结合 HA 的 日出日落组件，我们改造一下上面的自动化配置，添加昼夜环境下不同的光照临界值，这样在夜晚系统便不会提示植物缺乏光照。 由于 HA 附带历史数据记录功能并可视化数据，可以说已经比原生 app 不知道高到哪里去了。通过上面的配置，没有日志记录习惯的话基本可以摆脱原生 app 了。 当然，既然是利用 HA，我们一样可以把数据接入 Homekit。考虑一下场景，听 Siri 回复一堆数据显然非我所愿，我只想知道花正常不正常，缺不缺水，需不需要施肥。 只需在 HA 中新增加几个自定义传感器，根据数值显示正常不正常即可，之后接入 Homekit。 好了，现在可以问 Siri 了： 目前使用了一周，感觉还行，肥力会受湿度影响，因此提示缺肥时不妨也看一下水位。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列吐槽篇 - 大战 Yeelight]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Yeelight%2F</url>
    <content type="text"><![CDATA[从 0.50.1 版本开始不知道怎么的，我的 yeelight 灯带就不能接上 HA 了，在我确信我的配置和官网上的一模一样之后，首先怀疑不同两款型号的差异（中国版和海外版）屁颠屁颠跑去 Yeelight 论坛上问工作人员，人家回复说除了电源适配器，其他并无不同，真是瞎了。无奈只能怀疑这个插件有问题了，在 github 上提交了 issue，乖乖坐以待毙。然后姑且通过 HB 直接连接，毕竟 HB 只要装一个插件，其余配置什么都不需要。 升到 0.52.1 之后，心里总是揣着这件事，昨晚横下心来决定搞搞。 先是受 HA 论坛网友回复的启发，他只保留了light: -platform: yeelight的配置，其余连 IP 都没填，HA 识别成功。我依样画葫芦，不成。想了想，干脆把所有的相关配置都删除了，没想到，久违的 yeelight strip就这样出现在了 HA 的界面上。 知其然还要知其所以然，于是我重启了一下 HA，结果 yeelight 在是在，但是显示 unavailable。因为论坛上的哥们使用的是中国区，我就把 yeelight 切换到中国区，这下更糟糕，yeelight 直接从 HA 消失了。 看来还是得把它换回新加坡区，这也是我比较乐于见到的结果，毕竟只有海外区才可以使用 IFTTT 和 Google Assistant。再次观察了一下报错信息，我发现了当中有类似udp的信息上传，怀疑是不是路由器设置导致了udp信号被转发。跑去关掉科学上网，结果还是一样。 这就很奇怪了，HA 实际上是可以嗅探到设备的，但是却无法连接设备传输指令。在快要绝望的时候，我在打开灯带的情况下又重启了一次 HA，结果，yeelight 又回来了，虽然 log 里还是有着报错信息： 1WARNING (Thread-4) [root] Unknown miio device found: ServiceInfo(type=&apos;_miio._udp.local.&apos;, name=&apos;yeelink-light-strip1_miio54692213._miio._udp.local.&apos;, address=b&apos;\xc0\xa82\xd5&apos;, port=54321, weight=0, priority=0, server=&apos;yeelink-light-strip1_miio54692213.local.&apos;, properties=&#123;b&apos;mac&apos;: b&apos;286c072f6ce6&apos;, b&apos;epoch&apos;: b&apos;1&apos;&#125;) 到这里，大概是水落石出了。HA 可以自动识别灯带并添加为灯具，但是必须在开启 yeelight 的情况下重启 HA。我猜测是强制 yeelight 送出信号，辅助识别。而这段错误代码，我怀疑和小米的组件或者路由器的组件有关，因为找不到对应的 miio 的 platform 所以 HA 认为还没接入设备，一直报错提醒；也有可能是 yeelight 的插件不完善，使用了 miio 的库，开启了自动嗅探，但是没有对接上。具体的原因我也没心力再去深究了，总之久违的灯带回来了~]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[镜像源的那些事]]></title>
    <url>%2Fprogramming%2Fpypi%2F</url>
    <content type="text"><![CDATA[树莓派树莓派的官方系统 Raspbian 其实就是 Debian 的一个分支，所以所谓软件源也就是 apt-get 的源，使用其他 Debian 及改版原则上也是可以替换的，这里仅针对 Raspbian。 直捣黄龙： 1sudo nano /etc/apt/sources.list 改成： 123deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main contrib non-free $deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian jessie main contrib non-free $ 大吉大利，今晚吃鸡~ Pypi最近沉迷于 Python 爬虫不能自拔，虽然一个小小的爬虫技术含量真的不是很高，但是抓取信息成功的感觉像赚了 500 万~ 考虑到 HA 是 Python 编译的，因此平常更新也都仰赖 Pypi 源。虽然家里能科学上网，但是速度还是不够快，下个包要那么久实在是不能忍，全部换源。 我很少用 easy install，因此下面的都是 pip 修改方法。 1sudo nano ~/.pip/pip.conf 复制粘贴保存： 12[global]index-url = https://pypi.doubanio.com/simple/ 上面的是豆瓣源，还有下面几个比较常用的： 中科大：https://pypi.mirrors.ustc.edu.cn/simple/ 清华：https://pypi.tuna.tsinghua.edu.cn/simple/ 阿里：http://mirrors.aliyun.com/pypi/simple/ 还有一个神器 pqi,全平台通吃轻松切换源：安装：pip install pqi源列表：pqi ls使用：pqi use *** npm同理，折腾前端的时候躲不开要安装 Node.js，npm 源也最好改到淘宝源。（吐槽一下，我历史浏览记录都是淘宝源，以为自己天天在剁手。&gt; &lt;）速度还是小事，遇到ChromeDriver或者electron国内网络环境根本没办法下，十分烦人。 npm源替换有手动和一次性的，手动的很简单就是每次输完npm install安装指令后，在末尾添加--registry=--registry=https://registry.npm.taobao.org，不过还是一劳永逸比较好，直接 npm config set registry https://registry.npm.taobao.org，永久使用~ 当然也可以安装cnpm：npm install -g cnpm --registry=https://registry.npm.taobao.org，精神洁癖的我就是不愿意多打个 c，因此不采用。 人在天朝，拍拍代码无形中还多那么多事，真是伤感。]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[树莓派截图]]></title>
    <url>%2FRaspberrypi%2Fpi-screenshot%2F</url>
    <content type="text"><![CDATA[最近写教程要用魔镜的界面做图例，被迫要在树莓派上截图，又不想通过 VNC 再使用电脑的截屏工具，偷懒就想一劳永逸。 大部分教程都是推荐安装 scrot：sudo apt-get install scrot 然而，开启了全屏魔镜，实在不方便在树莓派的终端操作，想了半天看看键盘瞬间顿悟。 这个世界上还有一个叫作PrtSc的截屏键啊，没有的话，也可以通过 Fn + Insert 按出来。果然用惯了 Macbook 的键盘，对 PC 的键盘配列忘得一干二净。 于是，小手一按，什么事情都解决了。自己总是把简单的事情复杂化了。]]></content>
      <categories>
        <category>Raspberrypi</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列补充篇 - UI 研究]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-add01%2F</url>
    <content type="text"><![CDATA[HA 更新到 0.51.2 之后感觉愈加逆天了，增加了吸尘器的类，逼着我买扫地机器人啊。 然后是主题部分终于增加了背景色和卡片底色的自定义接口，这下黑暗模式总算可以实现了。从论坛偷来一个配置，看看这效果，简直服气！ 最近对 HA 的研究愈加深入，配置文件各种格式替换信手拈来啊~ 另外再次升级改造了一下自己的平面图，现在真的是逆天级别了： 动态效果： 空调开启时，吹风效果； 显示屏联动 PS4 显示在玩游戏名称，关闭时显示“学习中”； 盆栽含水量和肥力过低时会变红并闪烁提示浇花施肥 静态效果： 设备关闭变灰色，开启恢复原色； 家人在家绿色，离开红色； 可开关设备及场景都可点击（触摸）切换。 感觉基本上不会有大的变动了，开始慢慢退坑了~]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[灵光一现]]></title>
    <url>%2Fprogramming%2FDaily-experience%2F</url>
    <content type="text"><![CDATA[首先是快速连接树莓派，我受了 SSH 连接输密码的罪 N 个月了，昨天终于忍不下去了，突然想到这个世界不是有一个叫做alias的快捷键的东西吗？于是在终端输入：alias pi=&quot;ssh pi@192.168.xx.xx后，世界和平了。 当然这是建立在我已经配置了 SSH 公钥的前提下。这就扯到部署 Hexo 的部分了。之前已经在 GitHub 上存放了公钥，可是不知道为什么把密钥部署到 Coding.net 后，居然失效了。没办法，干脆重新生成公钥 ssh-keygen -t rsa，然后一口气把树莓派、Coding.net 和 Github 上的公钥都更新了。果然整完以后，hexo d 也不出错了，配合上面的快捷键，爽翻天~ 虽然之前有建站的经验，但是 Hexo 的部署还是遇到一些小障碍，好在都通过搜索大法和浅显的前端知识储备解决了。包括但不限于： deploy 后境外 IP 域名跳转失败。添加 CNAME 文件后解决 缺少 iOS 设备“添加至主屏幕”生成图标。添加 ios-touch-icon 后解决。 增加字数统计后，分类与统计黏一起了。通过修改 layout 文件解决。 现在觉得 Hexo 比 Wordpress 不知道高到哪里去了啊~ 果然爱折腾爱捣鼓爱代码的人更适合 Hexo，不过生活博客之类的还是 WP 的支持比较丰富啊。 另外今天成功抓取了上海地铁各线路的运行情况，未来打算做 HA 和 MagicMirror 的插件。Python 真的是伟大的语言啊~]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列高级篇 - 活用 Command Line]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Command-line%2F</url>
    <content type="text"><![CDATA[（本篇文章已发布至 少数派） 之前的教程基本都是面向初学者的，然而我相信读者中不乏有代码好手，更有对 HASS 已经研究颇深的朋友。本篇简短教程姑且一步登天，和各位程序猿（媛）讨论如何利用 HA 中强大的 command-line 以快速实现期望功能。 初学乍练HA 之中接入一个设备往往需要经由 平台——组件 这一流程，过程十分繁琐，有时我们只是想运行一些简单的 Python 代码，或者只是想测试一下效果，因此完全没有必要特别去创建平台。 HA 为此特别提供了名为 “Command Line” 的传感器组件，这个强无敌的组件能让你在 HA 中运行任何支持该平台的命令，还可以显示指令结果。 同其他传感器组件一样，使用 Command-Line，只需在configuration.yaml中添加如下配置： 123sensor: - platform: command_line command: SENSOR_COMMAND HA 官方给出了一些简单的应用例子，我们不妨来看一下： 显示 CPU 温度我们知道在树莓派终端中输入 cat /sys/class/thermal/thermal_zone0/temp 指令便可以获取 CPU 温度的千倍值，想让 HA 运行指令只需将其写入配置文件中。 123456sensor: - platform: command_line name: CPU Temperature command: "cat /sys/class/thermal/thermal_zone0/temp" unit_of_measurement: "°C" value_template: '&#123;&#123; value | multiply(0.001) &#125;&#125;' 重启 HA 后，HA 便会添加一个 sensor.CPU_Temerature 的传感器，之后就和其他组件一样，可以对其随意个性化配置。 抓取 HA 最新版本信息HA 的包上传在 PyPI 上，自然版本信息也包括在内，通过抓取便可轻易获得。 1234sensor: - platform: command_line command: python3 -c "import requests; print(requests.get('https://pypi.python.org/pypi/homeassistant/json').json()['info']['version'])" name: HA release 同理，HA 内会生成名为 sensor.HA_release 的传感器组件。 该例中，我们简单涉及了一些数据抓取的技巧，在 HA 内其实提供了一个特别的用于数据抓取的组件：Scrape Sensor，这里也简单介绍一下。 渐入佳境Scrape Sensor 组件顾名思义是用来抓取（刮削）数据的，但是实测下来，效果有限。 基本配置如下： 1234sensor: - platform: scrape resource: https://home-assistant.io select: ".current-version h1" 稍有前端基础的朋友应该很快就可以明白其意，最后的 select 可以设定需要抓取的类或者是对象。 比如你是 IFTTT 的重度患者，想要在 HA 前端显示所用的 Applets 的情况，就可以这样配置： 12345sensor: - platform: scrape resource: http://status.ifttt.com/ name: IFTTT status select: '.component-status' 摸清楚原理，我们很快就会意识到 Scrape 只能用来刮削结构简单的静态网页，一旦网页稍微复杂一些，数据根本无法被 select 出。 小试牛刀说了那么多官方示例，现在轮到我们自己动手实践了。 Commadn Line 的本质还是辅助性组件，想要指望其运行复杂的代码显然是不切实际的。个人认为该组件的重点在于信息展示上，因此也不难理解官方给出的例子都与数据抓取多多少少有一些关系。 HA 是建立在 Python 之上的，配合各类库的使用，Python 的数据抓取能力十分强大。Command Line 既然是 HA 里的小终端，那么自然支持运行外置代码文件。 作为长在海边的孩子，自己对潮汐情况比较关注。HA 的部分天气组件提供了潮汐数据，但涉及汉化、挑选和适配传感器，操作起来十分麻烦。于是我想到直接写一小段 Python 代码抓取潮汐数据。 123456789101112131415161718192021222324252627282930313233from bs4 import BeautifulSoupimport requestsimport time#日期格式化d = time.strftime("%Y-%m-%d", time.localtime())#港口代码，前往 http://www.chinaports.com/chaoxi/ 取得port_code = 122port_code = str(port_code)#获取数据html = requests.get("http://www.chinaports.com/chaoxi/" + d + "/" + port_code).contentsoup = BeautifulSoup(html, "html5lib", from_encoding="utf-8")result = soup.find("table", class_="tidaltable")detail = result("td")#打印数据count = len(detail)if count == 8: first_height = int(detail[5].string) second_height = int(detail[6].string) if first_height &gt; second_height: print ("涨潮：" + detail[1].string + " " + detail[3].string + "；退潮：" + detail[2].string) else: print ("涨潮：" + detail[2].string + " " + "；退潮： " + detail[1].string + " " + detail[3].string)else: first_height = int(detail[6].string) second_height = int(detail[7].string) if first_height &gt; second_height: print ("涨潮：" + detail[2].string + " " + detail[4].string + "；退潮：" + detail[1].string + detail[3].string) else: print ("涨潮：" + detail[1].string + " " + detail[3].string + "；退潮：" + detail[2].string + detail[4].string) 该段代码使用了 BeautifulSoup4 库，比起 Scrape Senso 抓取、整理数据的能力自然强多了。 然后将该 tide.py 文件存放在任意文件夹内，再配置 configuration.yaml 文件即可： 123456789101112#潮汐sensor: - platform: command_line name: Tide command: "python3 /home/pi/Downloads/tide.py" #个性化homeassistant: customize: sensor.tide: friendly_name: 潮汐 icon: mdi:waves 重启 HA，潮汐时间就出现在主界面了： 看过这个小例子，相信各位程序员已经摩拳擦掌了。由于精力有限，我没有测试其他语言的代码在 Command Line 组件中的运行情况。但是可以肯定，该组件大大提升了 HA 的广度和深度，令人不禁想好好玩弄一番呢~ 期待各位派友运用 Command Line 实现新颖的功能，欢迎留言分享与讨论。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列提高篇 - 个性化配置篇]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Custom-Setup%2F</url>
    <content type="text"><![CDATA[（本文已发表至 少数派） 通过之前的篇章，相信大家已经能够较舒适地使用 HA 这个平台了。然而，人往往是不安于现状的。作为积极向上的好青年，我们想让 HA 看起来更美观大方，特别是面对乱码一般的默认设备名称，大家的内心想必是凌乱的。 为了拯救各位强迫症患者，本期教程将向大家提供个性化配置的支持。 特别提醒：Yaml 特别重视语法格式，之前很多朋友出错也是因为格式不正确，请大家在配置时务必额外注意缩进、冒号、短横线的使用。 页面结构开始具体配置教程前，我们需要先了解一下 HA 主页的页面构成，方便之后更快理解配置指向对象。由于我已修改硬核代码更改主题，再进行恢复较麻烦，这里使用 HA 公开的参考配置截图作说明： 由图可知，HA 主页面的左侧栏集中了所有面板的入口，默认主页即“State（状态）”面板。 该面板中又上至下依次包括工具栏，标签页，徽章栏及由设备卡片及灰色空白区组成的主区域。 当我们新接入一个设备，如果是带有开关属性可控制的、监控摄像头、媒体播放器等设备，HA 会自动为其生成一张卡片；而其他仅有信息展示属性的设备（比如温度、湿度、人体传感器、设备在线状态等）则会生成徽章集中在头部。 HA 提供了以上所有元素的个性化配置，本篇教程将重点讲述设备、组群、主题三项配置方法，能满足大部分的用户浅层的配置需求。 设备自定义在本文开头提到的那些看起来乱码的名称，其实是 HA 中的 entity ID，该 ID 具有唯一性，是 HA 系统区别设备的代号。点击侧边栏左下 “&lt; &gt;” 进入开发者 States 面板，便可以获得所有接入设备的 Entity ID。 当然，代号是给计算机读的，并不适合展示于人，接下来我们就来学习如何对设备进行基本配置，解决乱糟糟的界面。 对设备进行自定义设置，请在 homeassistant：下新增 customize: 块，请特别注意代码的层级。 12345678910111213141516171819202122homeassistant: name: Home unit_system: metric customize: thermostat.family_room: #entity_ID entity_picture: https://example.com/images/nest.jpg #图片 icon: mdi:kettle #图标，来自 https://materialdesignicons.com/ #图标和图片只能选择一个配置 friendly_name: Nest #昵称，显示在主页面 hidden: true #是否隐藏 homebridge_hidden: true #是否在 Homebridge中隐藏，避免 HB 重复添加设备 以上是设备所需最常见的属性设置，更多设置请参考官方文档。 初步设置后，相信你的界面已经有了不少改变。 组群管理随着更多的设备接入，我们不难发现主页面开始渐失逻辑性和层次性，这时候就需要引入组群管理。 顾名思义，组群管理就是将一系列的设备、场景等（后续教程将会涉及）组合在一起形成群组（Group）。比如，可将卧室内的所有设备集中为“卧室”群组，或者将所有灯集中为“灯”群组。通过配置组群，可以让我们的 HA 界面清晰明了，方便操作。 同样我们在configuration.yaml文件中添加如下配置，注意与 homeassistant平级。 1234567891011121314151617181920212223242526homeassistant: #此项为展示平级用，勿照搬 name: Home unit_system: metricgroup: default_view: #群组名称，必须为英文，空格使用 _ 代替 name: Climate #昵称，可中文 view: yes #是否以标签页形式展示，默认为是 icon: mdi:home #图标 entities: #组内设备 - group.kitchen - group.awesome_people - group.climate control: #当群组内有多个可控制设备时，是否显示总控制开关 我们通过群组管理，可以将非控制类设备由徽章转化为卡片内项，避免了主页面一排徽章的窘境。 代码整洁我们在进行个性化配置中，满足了界面的简洁需求，但是同时也应该注意到随着设置的不断增多，configuration.yaml的内容也不断增加，整个文件显得十分臃肿。这时候我们需要内外兼修，将设备个性化等较长的配置独立出来，形成文件，再接入 configuration.yaml。 比如，我们在 HA 配置文件夹内新建 customize.yaml 和 group.yaml 文件，把对应内容复制进去： customize.yaml： 1234567891011121314thermostat.family_room: #entity_ID entity_picture: https://example.com/images/nest.jpg #图片 icon: mdi:kettle #图标，来自 https://materialdesignicons.com/ #图标和图片只能选择一个配置 friendly_name: Nest #昵称，显示在主页面 hidden: true #是否隐藏 homebridge_hidden: true #是否在 Homebridge中隐藏，避免 HB 重复添加设备 group.yaml: 123456789101112131415161718default_view: #群组名称，必须为英文，空格使用 _ 代替 name: Climate #昵称，可中文 view: yes #是否以标签页形式展示，默认为是 icon: mdi:home #图标 entities: #组内设备 - group.kitchen - group.awesome_people - group.climate control: #当群组内有多个可控制设备时，是否显示总控制开关 注意直接复制内容，无须 group 或 cunstomize 前缀，顶格写起。 之后在configuration.yaml使用!include xxxx.yaml进行调用： 123456homeassistant: customize: !include customize.yamlgroup: !include group.yaml 这样我们就能保持配置文件的整洁和逻辑性。 主题主题是 HA 在 0.49.2 更新中加入的功能，支持配置大部分 UI 中的字体、颜色等 CSS 值。最新 0.51.2 版本中已经添加对背景色替换的支持，也意味着黑暗模式终于得以实现。 配置主题需要两个步骤，一为添加配置文件，二为调用主题。 首先是添加配置文件，主题应在 frontend块内进行配置： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162frontend: themes: night: #主题名称，英文 # 主界面 # primary-color: "#1DE9B6" # 主 UI 字体颜色 primary-background-color: "#303030" # 其他部件背景色 (dialogs, e.t.c) secondary-background-color: "#303030" # 主 UI 背景颜色 paper-card-background-color: "#424242" # 卡片背景颜色 paper-item-icon-color: "#1DE9B6" # Icon colour primary-text-color: "#FFFFFF" # 首选字体颜色 secondary-text-color: "rgba(255, 255, 255, 0.7)" # 次字体颜色 disabled-text-color: "rgba(255, 255, 255, 0.5)" # Disabled text colour divider-color: "rgba(255, 255, 255, 0.12)" # Divider colour paper-card-header-color: "#FFFFFF" # 卡片标题颜色 # 侧边栏 # paper-listbox-background-color: "#424242" # 背景色 paper-listbox-color: "#FFFFFF" # 字体色 paper-grey-200: "#616161" # 选中项背景色 # 开关 # paper-toggle-button-checked-ink-color: "#1DE9B6" paper-toggle-button-checked-button-color: "#1DE9B6" paper-toggle-button-checked-bar-color: "#1DE9B6" # Sliders # paper-slider-knob-color: "#1DE9B6" paper-slider-knob-start-color: "#1DE9B6" paper-slider-pin-color: "#1DE9B6" paper-slider-active-color: "#1DE9B6" paper-slider-secondary-color: "#33F2D8" 具体可设置的对象有数十个，恕我无法一一列举及解释，有待大家自己调试，对象列表请参考此处。 以上主题源自 HA 官方论坛的网友分享，原文地址见此。 主题配置后就是调用了，这里有 3 种方法： 手动调用1：打开左下角 Service 面板，由上之下依次选择frontend - set_theme，之后填入{&quot;name&quot;:&quot;主题名称&quot;}，最后点击 call_service。 PS：在这里，我们也可以进行 Home Assistant 的重启。 手动调用2（仅限 0.51.2 及以上版本 HA）：打开左侧面板 — 选择Configuration — 右侧点击configuration.yaml按钮 - 下方 Set A theme 选择你要的主题 - 即时生效 自动调用：这里预习一下将要学习的自动化知识吧~ 在 configuration.yaml 文件中添加如下配置，注意与 homeassistant平级： automation: - alias: 'Set theme at startup' initial_state: 'on' trigger: - platform: homeassistant event: start action: service: frontend.set_theme data: name: happy #主题名称 相信到这里，大家的 HA 界面已经楚楚动人了，赶紧把 HA 拿出去秀一下吧~ HA 除了预设的个性化配置甚至还提供了自定义卡片、自定义面板等等接口，你可以在卡片中显示徽章，可以使用全文字面板控制设备甚至可以修改硬核代码实现夜间模式……简直是促使程序员们大开脑洞啊，更多的详细教程欢迎关注接下来的高级篇。 ………… 吊个胃口，比如一个具有交互性并且实时更新的“活点地图”？]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列基础篇 - Hass.io 篇]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Hass-io%2F</url>
    <content type="text"><![CDATA[HASS 推出至今也经历不少时日，然而我相信不少人都对 HASS 安装和配置的复杂度颇有怨言，甚至直接导致了对 HASS 平台的放弃。HASS 官方渐渐也意识到这个问题，于 2017年7月26日 推出了菜鸟级集成系统 Hass.io，采用了全图形化安装配置界面，真正做到了一卡在手，系统不愁。为此我制作了 Hass.io 的特别篇，希望帮助之前对 HASS 望而却步的朋友打造自己的智能家居集成平台。 在各位朋友安装前，还请允许我简单比较一下安装 HASS 的三种方法。Hassbian 和 All-in-One 所安装的 HASS 都是基于本身的系统框架运行的，因此拥有原生系统的功能、参考文档等一切，你可以理解为买了一幢公寓里的一个套间。而 Hass.io 则是独立的系统，一切全部依靠图形界面操作，你所能接触的文档权限亦非常有限，就像你虽然拥有一幢楼，但是装修得按着别人的规划走。特别是出现问题时，只能从 Hass 官网和社群寻找支持。 因此，如果你是一个只想速度安装，把别人配置照搬小改就能用上 Hass 的人，建议你使用 Hass.io。如果你哪怕对配置系统环境等等方面有一点点的期望和要求，在这里郑重建议你暂时放弃 Hass.io，采用『安装篇』中介绍的其他方法安装。 安装Hass.io 是 HA 官方与 ReinOS 合作推出的系统，既然是“系统”，安装方法就和其他树莓派系统一致。下载 Hass.io 镜像文件（我将镜像搬运到了度盘，code: 7mvb ），使用 Etcher 等应用将系统烧录至内存卡，将卡插入树莓派中，保证树莓派处于联网状态。由于安装资源需要全程连接『外网』下载，请大家务必调试好『网络环境』，这将决定你的安（抓）装（狂）进度。 如要设置 WIFI 连接，请打开存储卡目录下 system-connections/resin-sample 文件，使用编译器编辑： 1234567891011121314151617181920[connection]id=resin-wifitype=wifi[wifi]hidden=truemode=infrastructuressid=你的WIFI SSID[ipv4]method=auto[ipv6]addr-gen-mode=stable-privacymethod=auto[wifi-security]auth-alg=openkey-mgmt=wpa-pskpsk=你的 WIFI 密码 等待大约 10 - 20 分钟后，使用内网内其他终端设备打开网页 http://hassio.local:8123 ，可以看到系统提示正在初始安装： 接下来请泡杯茶，煮包泡面，吃泡面，出去走一走…… 因为，不要被 “up to 20 min” 欺骗了，20分钟这种事只会发生在童话里，实测耗时半天。 安装成功后，我们就会见到初始界面，还是熟悉的配方，还是熟悉的味道： 老样子，接下来就是安装附加功能了。 附加功能Hass.io 的核心就在于高度简化配置过程，尽量使用全图形化操作，插件的安装亦如此。 点击左侧栏 - Hass.io，我们便进入了附加功能安装面板。HA 老用户不难发现对比其他版本 HA 增加了自动化和 Hass.io 面板。而后者就是 Hass.io 的插件管理界面，你可以在此安装官方提供的插件，也可以添加插件源安装其他用户分享或自己制作的插件，十分便捷方便。 下面我们使用操作面板安装 Samba 功能，实现 HASS 和电脑的文件共享。 SMBSMB 如此重要，自然 Hass.io 原生内置了安装入口。在插件安装面板下拉找到 Samba Share，点击进入安装界面，而后再点击 Install，等到小圈不转了，一切就大功告成啦，是不是很迅猛？ 安装成功后，便会出现 Info 和 Options 卡片。（什么，还不知道卡片是什么？快去看看最新的个性化设置篇教程吧） 首先，建议在 Info 中打开自动更新。接着我们来详细看看 Options 中的配置。 123456789101112131415&#123; "workgroup": "WORKGROUP", "name": "hassio", "guest": true, "map": &#123; "config": true, "addons": true, "ssl": false, "share": true, "backup": true &#125;, "username": "", "password": "", "interface": "eth0"&#125; 变量说明：（汉化官方文档，原文地址） 1234567name (可选): 用户名，默认值 hassio。 workgroup (可选): 用户组，默认值 WORKGROUP。guest (可选): 是否允许客人用户（无用户名无密码）默认值 true。map (可选): 开放文件夹，默认值 all，即全部开放。可选有 config，addons，share，backup，ssl。username (可选): 登录用户名。password (可选): 登录密码。interface (可选): 开放接口，有线网连接使用 eth0，无线网连接使用 wlan0。 按需更改配置后，点击 Save 保存，再点击 Start，你的 SMB 服务就启动了，并且自动加入了自启服务。 通过 SMB 的设置，相信你对在 hass.io 中安装附加功能（Add-on）有了一定了解，官方提供的 插件列表见此，大家可以根据说明按需安装。 这里推荐安装 SMB、SSH 及 Bluetooth BCM43xx，可以使你更安逸地使用 hass.io。 使用 Apple 终端，对使用 Homekit 控制智能家居设备有需求的朋友不少，因此接下来特别介绍一下 Homebridge插件的安装方法，希望大家可以借此掌握安装第三方源插件的方法。 Homebridge打开 Hass.io 面板，点击商店图标进入 add-on 安装界面： 添加插件源地址：https://github.com/hassio-addons/repository。注意如果你要添加多个源，保持一行一个地址即可。 添加后右上角刷新，滚动至页尾，可看到插件卡片，点击安装。 之后的步骤就大同小异了，在 Options 卡片内，添加你要安装的 Homebridge 的插件，注意是 HB 的插件。默认已经安装 Homebridge-homeassistant 插件，所以各位要注意调整 HA 配置，避免出现设备重复识别问题。 安装插件后，就是配置 HB 了。HB 的 配置文件存放在 /config/homebridge/config.json，具体配置方法大家可以前往 『安装篇』 阅读，我就不重复了。由于配置文档在 config 文件夹内，所以大家在上面开启 SMB 服务时要特别注意打开 config 文件夹权限： 1234......&quot;map&quot;: &#123; &quot;config&quot;: true...... 保存设置后，启动服务，你的 iPhone 就可以嗅探到树莓派了。 安装附加功能后，你的 HA 环境就和其他方法安装的 HA 基本一致了。有关设备的接入、个性化配置等，欢迎参考系列的其他文章。老用户可以直接复制粘贴原 configuration.yaml 配置文件，特别注意添加 Discovery: 服务。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列基础篇 - 小米特别篇]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Xiaomi%2F</url>
    <content type="text"><![CDATA[通过之前的『安装篇』与『设备接入篇』，相信大家对 Home Assistant 有了一定程度的认识。 小米的智能家居设备物美价廉，博得了国内外不少用户的喜爱。不要不信，在 Home Assistant 官方论坛上，米家设备相关话题的热度一直居高不下。HA 在最新 50.0 版本中已经添加了对小米平台的官方支持。 我们知道小米生态链挺复杂，紫米、绿米各种子公司。不管牌怎么换，对于集成平台来说，想要一统江湖，我们只需关心设备的传输协议即可。 目前有一个简单粗暴的标准，即如果一个设备需要小米多功能网关才可以使用，一般来说它采用的是 Zigbee 协议，那么只要网关接入了 HA 就可以完美适配。而如果一个设备是独立接入网络的，比如米家 Wi-Fi 插座、扫地机器人、Yeelight 灯具等，我们则需要单独在 HA 里接入它们。 类似的标准也适用于 Homeridge，homebridge-mi-aqara 插件正常情况下只支持 Zigbee 设备，其他设备需要另安装插件。 本篇教程将介绍将小米设备接入 HA 和 通过 Hombridge 接入 Apple Home 两大平台的方法，具体选择哪个方案，大家各取所需，有关平台选择和区别详见本系列之前的文章。 下图是我个人独立整理的小米生态链部分设备支持列表（中英双语）： 表格使用 Google SpreadSheet 编辑，将会不断更新。在此欢迎各位朋友向我提供支持信息或内容纠正，直接在表格内评论即可。 下面我们以传输协议为划分标准，分别介绍小米设备接入智能家居系统的方法： Zigbee 设备（小米多功能网关）小米多功能网关（第二代）是大部分『米家』及 『绿米（Aqara）』 Zigbee 设备的联动基础，也是整个米家智能家居系统的核心。 本部分教程仅适用于『绿米网关局域网通信协议』 1.x 版本的环境，不保证对未来『局域网通信协议』升级后的适用性。 要将网关接入 HA，我们需要先打开网关的通信协议，并获取通讯密码。 打开米家 app，连接设置多功能网关，点击进入网关页面，点击右上角「•••」，进入「设置」。点击第二行「关于」，狂点空白处，便会跳出「局域网通信协议」以及「网关信息」。进入「局域网通信协议」，打开开关，记录下密码，这就是之后待填的「key」。回到上级页面，进入「网关信息」，记录下 mac 地址，这就是之后待填的「sid 或 mac」。 HA 0.50.0及之后版本已经添加对米家平台的官方支持，我们只需要直接配置即可。如果之前有复制 custom_componets 文件夹的同学，升级后请删除该文件夹。通过 SMB 链接至树莓派，在 HA 主目录打开 configuration.yaml 文件，在最后添加如下字段： 0.53.1 版及之前12345678xiaomi: gateways: - mac: MAC 地址 （地址不带 "-" 或 ":" ，最前面的「-」必须保留） key: 通讯密码 （注意：iOS 设备 key 请使用大写，安卓设备 key 请使用小写。） 如果你有多个网关，则按以下格式设定： 1234567xiaomi: gateways: - mac: xxxxxxxxxxxx key: xxxxxxxxxxxxxxxx - mac: xxxxxxxxxxxx key: xxxxxxxxxxxxxxxx 0.54.0版及之后12345678xiaomi_aqara: gateways: - mac: MAC 地址 （地址不带 "-" 或 ":" ，最前面的「-」必须保留） key: 通讯密码 （注意：iOS 设备 key 请使用大写，安卓设备 key 请使用小写。） 重启后，HA 主界面将会自动识别网关及捆绑的所有设备。HB 也一并会自动嗅探，剩下就是在『家庭 app』里面慢慢添加了。 米家平台既支持 HA，也支持 HB。如果你想通过后者接入，建议使用 homebridge-mi-aqara 插件，该插件较 homebridge-aqara 更新更频繁，对新设备支持较好。再次强调，未掌握『个性化配置』的初学者，请遵守同一设备只能接入一个平台的原则。 1234cdsudo npm homebridge-mi-aqara 请勿将以下配置与『设备接入篇』中配置混淆，该配置为全新配置，建立在『安装篇』完成后已经运行并退出过 Homebridge 一次的基础上。如果你已经根据『设备接入篇』接入了 HA，请删除 config.json 下全部内容再进行下述操作。 12345678910111213141516171819202122232425262728293031323334cd /home/pi/.homebridge/sudo nano config.json&#123;&quot;bridge&quot;: &#123;&quot;name&quot;: &quot;Homebridge&quot;,&quot;username&quot;: &quot;CC:22:3D:E3:CE:30&quot;,&quot;port&quot;: 51826,&quot;pin&quot;: &quot;123-45-678&quot;&#125;,&quot;platforms&quot;: [&#123;&quot;platform&quot;: &quot;MiAqaraPlatform&quot;,&quot;sid&quot;: [&quot;6409802da3b3&quot;], （注意小写）&quot;password&quot;: [&quot;02i44k56zrgg578b&quot;] （注意小写）&#125;]&#125; 这里特别注意和使用 homebridge-homeassistant 插件 的 HB 设置相区分，之后重启 HB 即可。 Yeelight 灯具Yeelight 目前已经从小米独立出来，运作良好，原生支持 Google Assistant 等平台，应该说是小米生态链下「走出去」的先锋。Yeelight 同时支持接入 HA 和 HB 两大平台，前者支持音乐随动功能等，但支持设备品类有限；后者则全产品支持，但是功能比较单一。这里两种方法均一并介绍。 HA根据官方文档，目前 HA 支持 Yeeglight 下列型号的设备： YLDP01YL： 白光 LED 灯泡 YLDP02YL&amp;YLDP03YL：彩色 LED 灯泡 YLDD02YL&amp;YLDD01YL：LED 灯带 经过网友测试还支持『吸顶灯』系列。另外还支持早期的 Sunflower 系列，目前产品已经停产，我这里就跳过它的配置方法了。 配置前请先在 Yeelight app 中打开“极客模式”，地区选择中国或新加坡皆可，注意如果区域设置与米家 app 设置不同，则设备无法接入米家 app，但不影响 HA 和 HB 的控制。 之后重启 HA，重启前请打开灯具，稍等几分钟，确认一下设备是否已经被 HA 自动识别添加，如果是的话，皆大欢喜，什么都无需再做了；如果没有，请打开configuration.yaml文件，在合适位置添加如下字段： 12345678light: - platform: yeelight devices: 192.168.1.25: #Yeelight灯具ip name: Living Room #昵称 transition: 1000 use_music_mode: True #音乐随动模式，默认关闭 HB原则上支持所有传输协议为 WIFI 的 Yeelight 设备。 安装 Yeelight 插件 npm install -g homebridge-yeelight 吸顶灯、灯带、灯泡等 WIFI 传输设备无需添加其他配置，手机会自动识别。 蓝牙床头灯（Yeelight 即将推出 Wifi 连接的床头灯，请大家注意区分。）请在终端运行如下指令，安装蓝牙服务： 12345678sudo apt-get install libbluetooth-devsudo npm install -g noblesudo apt-get install libcap2-binsudo setcap cap_net_raw+eip $(eval readlink -f `which node`) 注意，初次连接床头灯时，当看到呼吸灯效果，记住按下 Mode 按钮以赋予树莓派访问权限。 以上 2 个是最常见的具有统一插件的设备适配，下面我挑选了几个特殊的常见设备介绍具体的配置方法： 米家扫地机器人扫地机器人的接入和设置目前比较麻烦，大家需要有点耐心，我相信随着插件的不断更迭，支持的功能会越来越多。HA 最新 v52.1 赋予了扫地机器人专门的类—— vacuum，因此以后相关智能吸尘器、扫地机都可类比之前的灯具、开关进行配置。 注：我没有扫地机器人，以下方法未经测试。 HAiOS &amp; macOS 将扫地机器人与米家 app 适配连接，而后使用 iTunes 创建无加密的 iOS 备份 安装 iBackup Viewer 使用 iBackup Viewer 查看备份，将 /raw data/com.xiami.mihome/_mihome.sqlite 文件解压至电脑 使用文件编辑器打开该文件，找到扫地机器人的 token 在 configuration.yaml 文件中填入下列设置： 0.53.1版本及之前123456vacuum: - platform: xiaomi name: &apos;***&apos; #昵称 host: 192.168.1.2 #ip token: R@#RT$TFEW #token 0.54.0版本及之后123456vacuum: - platform: xiaomi_miio name: &apos;***&apos; #昵称 host: 192.168.1.2 #ip token: R@#RT$TFEW #token HB 安装扫地机器人插件，不要漏了最后的『miio』 12npm install -g homebridge-xiaomi-mi-robot-vacuum miio 取消机器人与米家 App 的配对 同时按下机器人上电源和家按键 3 秒 将电脑连接至机器人生成的 Wi-Fi 热点上 打开终端，输入： 12miio --discover --sync 记录下 token 断开 Wi-Fi，将机器人重新与米家 app 配对，获取机器人的 IP 地址 在 config.json 中添加如下内容： 123456789101112&quot;accessories&quot;: [ &#123; &quot;accessory&quot;: &quot;MiRobotVacuum&quot;, &quot;name&quot;: &quot;Vacuum Cleaner&quot;, &quot;ip&quot;: &quot;IP_ADDRESS_OF_THE_ROBOT&quot;, &quot;token&quot;: &quot;TOKEN_DISCOVERED_FROM_STEP_7&quot;, &#125; ] 空气净化器空气净化器目前仅支持 HB， HA 仅支持自定义组件且限 2 代空净，因此就不展开了。 HB安装插件： npm install -g homebridge-mi-airpurifier miio 添加配置： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&quot;platforms&quot;: [&#123; &quot;platform&quot;: &quot;MiAirPurifierPlatform&quot;, //一代空净 &quot;deviceCfgs&quot;: [&#123; &quot;type&quot;: &quot;AirPurifier&quot;, &quot;ip&quot;: &quot;192.168.88.xx&quot;, &quot;token&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, &quot;airPurifierDisable&quot;: false, &quot;airPurifierName&quot;: &quot;AirPurifier&quot;, &quot;silentModeSwitchDisable&quot;: false, &quot;silentModeSwitchName&quot;: &quot;AirPurifier Silent Mode Switch&quot;, &quot;temperatureDisable&quot;: false, &quot;temperatureName&quot;: &quot;Temperature&quot;, &quot;humidityDisable&quot;: false, &quot;humidityName&quot;: &quot;Humidity&quot;, &quot;buzzerSwitchDisable&quot;: true, &quot;buzzerSwitchName&quot;: &quot;AirPurifier Buzzer Switch&quot;, &quot;ledBulbDisable&quot;: true, &quot;ledBulbName&quot;: &quot;AirPurifier LED Switch&quot;, &quot;airQualityDisable&quot;: false, &quot;airQualityName&quot;: &quot;AirQuality&quot; &#125;, &#123; &quot;type&quot;: &quot;AirPurifier2&quot;, //二代空净 &quot;ip&quot;: &quot;192.168.88.xx&quot;, &quot;token&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, &quot;airPurifierDisable&quot;: false, &quot;airPurifierName&quot;: &quot;AirPurifier&quot;, &quot;silentModeSwitchDisable&quot;: false, &quot;silentModeSwitchName&quot;: &quot;AirPurifier Silent Mode Switch&quot;, &quot;temperatureDisable&quot;: false, &quot;temperatureName&quot;: &quot;Temperature&quot;, &quot;humidityDisable&quot;: false, &quot;humidityName&quot;: &quot;Humidity&quot;, &quot;buzzerSwitchDisable&quot;: true, &quot;buzzerSwitchName&quot;: &quot;AirPurifier Buzzer Switch&quot;, &quot;ledBulbDisable&quot;: true, &quot;ledBulbName&quot;: &quot;AirPurifier LED Switch&quot;, &quot;airQualityDisable&quot;: false, &quot;airQualityName&quot;: &quot;AirQuality&quot; &#125;, &#123; &quot;type&quot;: &quot;AirPurifierPro&quot;, //pro 版空净 &quot;ip&quot;: &quot;192.168.88.xx&quot;, &quot;token&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, &quot;airPurifierDisable&quot;: false, &quot;airPurifierName&quot;: &quot;AirPurifier&quot;, &quot;silentModeSwitchDisable&quot;: false, &quot;silentModeSwitchName&quot;: &quot;AirPurifier Silent Mode Switch&quot;, &quot;temperatureDisable&quot;: false, &quot;temperatureName&quot;: &quot;Temperature&quot;, &quot;humidityDisable&quot;: false, &quot;humidityName&quot;: &quot;Humidity&quot;, &quot;buzzerSwitchDisable&quot;: true, &quot;buzzerSwitchName&quot;: &quot;AirPurifier Buzzer Switch&quot;, &quot;ledBulbDisable&quot;: true, &quot;ledBulbName&quot;: &quot;AirPurifier LED Switch&quot;, &quot;airQualityDisable&quot;: false, &quot;airQualityName&quot;: &quot;AirQuality&quot; &#125;]&#125;] 空调伴侣米家和 Aqara 均发布了自己品牌的空调伴侣，除外观差异外，内核并无不同。目前空调伴侣支持接入 HB 和 HA，注意由于小米未开放空调伴侣的通信协议，因此插件均不支持伴侣网关功能，仅提供空调控制部分的支持。另，目前插件仅支持部分空调品牌的部分预设模式，详见插件说明页，未支持的型号请自行抓包红外码。 HB安装 HB 插件： 12npm install -g homebridge-mi-heatercooler miio 参考上方小米扫地机器人方法获取设备的 token，安卓手机用户只需进入『米家』应用，点击空调伴侣，选择右上角『•••』—— 『关于』—— 狂点下方的『插件版本：xx』区域，即可获得 token 信息。 之后在 HB 的 config.json 中添加如下配置： 123456789101112&quot;accessories&quot;: [ &#123; &quot;accessory&quot;: &quot;MiHeaterCooler&quot;, &quot;name&quot;: &quot;AC Partner&quot;, &quot;address&quot;: &quot;192.168.1.154&quot;, &quot;token&quot;: &quot;xxxxxxxxxxxxxx&quot;, &quot;sensorId&quot;: &quot;xxxxxxxxxx&quot;, &quot;enableLED&quot;: true, &quot;ratedPower&quot;: 735 &#125;,] HA首先，安装 python-miio 依赖： 12pip3 install python-miio 如果是在虚拟环境中运行 HA 的用户，请先激活虚拟环境后再安装： 12345678sudo su -s /bin/bash homeassistantsource /srv/homeassistant/homeassistant_venv/bin/activatepip3 install python-miioexit 接着前往 插件页 下载自定义组件，复制粘贴至 HA 配置文件夹中的 custom_components 文件夹中（如没有请自行创建），之后在 configuration.yaml 中添加如下配置： 12345678climate: - platform: mi_acpartner name: mi_acpartner host: 10.0.0.234 #ip地址 token: ****** #token target_sensor: sensor.temperature_158d00015aefc4 #温度传感器 ID target_temp: 26 #目标温度 token 的获取方法同 HB 插件，之后重启 HA 更新日志 10.11 更新空气净化器及支持列表； 09.28 小修正； 09.23 增加最新版本网关设置，HA 最新版本为 0.54.0； 09.17 小幅更新； 09.11 更新米家&amp;Aqara空调伴侣接入方法； 08.22 明确小米网关接入的秘钥大小写问题； 08.18 修改 Yeelight 部分内容，增加 Yeelight 床头灯 HB 连接方法； 08.14 更新扫地机器人配置方法； 08.08 关闭评论区； 07.30 伴随 HA 50.0 发布，更新设备支持列表； 07.23 修改设备支持列表，增加修改文件以适配 Zigbee 插座的方法，添加版本区分提醒。更新英文版小米设备支持列表。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列基础篇 - 设备接入]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Device-Access%2F</url>
    <content type="text"><![CDATA[相信大家通过之前的 安装篇 已经成功安装了 Home Assistant (HASS) 和 Homebridge，在这篇文章中，我将带领大家接入智能家居设备。 大多数人初接触 HASS 的时候经常一头雾水，原因是 HASS 的配置体系十分混乱，一个设备的完美接入需要涉及多个配置文件。实际上，系统架构不清晰也是 HASS 的最大缺点，因此，在开始配置教程前，我先帮助大家捋一捋 HASS 的配置框架。 HASS 配置框架HASS 的核心配置围绕 configuration.yaml 文件展开, 在这里你可以进行时区、度量单位、开发者模式、主题选择等等基础配置。当然，最为重要的，你将在该文件内完成所有设备的接入。这也是本篇教程的重点。 HASS 的运行依赖于一个个相对独立的功能组件(Components），比如小米米家平台就可以视作一个组件。有些时候，部分设备或者功能仍未得到 HASS 的官方支持，你必须在主目录下新建自定义组件custom_components文件夹，添加相关的设备支持文件。 完成上述的文件修改，加上 HB 的配置，你就可以自如控制所有智能家居设备了。 然而，使用一段时间后，你可能会觉得设备太多显示凌乱，想给界面换个风格，或者configuration.yaml文件看起来要炸了。此时，你会考虑把部分配置剥离出去形成独立的文件，以满足你的强迫症。例如你开启了“设备追踪功能”（Device Tracker），那么 HASS 将在主文件下自动生成 known_devices.yaml文件，你将在这里配置需要追踪的设备。本篇教程也将涉及相关内容。至于主题设置、群组设置等其他非功能性设置，我将在之后的”个性化配置“中详细介绍。 主文件设置上一篇教程中我们已经打开了树莓派的 SMB 服务，现在我们通过 SMB 打开 HASS 主目录。 （macOS 在 FInder 左侧栏“共享的”接入，Windows 在 计算机-地址栏 里直接输入 //树莓派地址 即可跳转) 打开configuration.yaml，文件默认包含如下内容，我们按需修改： 12345678910111213homeassistant: #经纬度 latitude: 32.87336 longitude: 117.22743 #海拔 elevation: 430 #度量单位，默认米 unit_system: metric #时区 time_zone: Asia/Shanghai #系统昵称，显示在主界面顶部 name: Home 正常情况下，剩下的部分便无须变动了。现在添加雅虎天气服务小试牛刀一下吧： 1234weather: - platform: yweather woeid: 2151849 其中，woeid是城市代码，打开雅虎天气官网输入城市后搜索，url的最后几位数字便是 保存，重启 HASS。 恭喜你，接入了第一个 HASS 组件~ 现在你大概明白 HASS 是怎么个操作原理了，HASS 支持上千款智能家居设备，你可以到此寻找你的设备按上述方法接入。 如果你是果家用户，需要 Homekit 服务，那么我们还需要转到 Homebridge 进行相关设置。 Homebridge 设置执行指令前，请保证曾经运行过一次 Homebridge。注意：如果添加了开机自启任务，勿重复运行 Homebridge，否则会出现端口占用错误。 1234567891011121314151617181920212223242526272829303132333435363738cd /var/homebridge/sudo nano config.json&#123;&quot;bridge&quot;: &#123;&quot;name&quot;: &quot;Homebridge&quot;,&quot;username&quot;: &quot;CC:22:3D:E3:CE:30（树莓派MAC地址）&quot;,&quot;port&quot;: 51826,&quot;pin&quot;: &quot;123-45-678（连接密码，自行设定）&quot;&#125;,&quot;platforms&quot;: [&#123;&quot;platform&quot;: &quot;HomeAssistant&quot;,&quot;name&quot;: &quot;HomeAssistant&quot;,&quot;host&quot;: &quot;http://树莓派地址:8123&quot;,&quot;password&quot;: &quot;raspberry&quot;, #此处为 HA 中的 api_password，如有设置请添加&quot;supported_types&quot;: [&quot;fan&quot;, &quot;binary_sensor&quot;, &quot;sensor&quot;, &quot;garage_door&quot;, &quot;input_boolean&quot;, &quot;light&quot;, &quot;lock&quot;, &quot;media_player&quot;, &quot;rollershutter&quot;, &quot;scene&quot;, &quot;switch&quot;]&#125;]&#125; ctrl+x，y，回车。之后清除 Homebridge 的缓存： 12sudo rm -rf /home/pi/.homebridge/persist/ 请大家记住此步指令，今后若出现重新配置 HA、HB 导致 iOS 设备无法识别新设备或树莓派的，大部分情况均可以使用此指令解决。 这样我们就完成了 Homebridge 的设置，重启Homebridge。 经过上述设置，我相信你的智能家居设备已经在 HASS 里稳定运转了，现在不妨尝试使用 Siri 操控你的设备。 鹬蚌相争？在之前的 安装篇 中我们知道 Homebridge 本身可以通过安装插件的方式将智能设备接入 Apple Home 平台，有的时候设备同时支持 HASS 和 Apple Home 2 个平台，这时我们就面临平台选择。 首先，这个问题只存在 iOS 以及未来的 macOS 用户身上，因为只有你们可以使用 Siri，才可以痛并快乐着。 对于其他终端系统的用户而言，要么和设备厂家的 app 斗智斗勇，要么享受 HASS 网页操控的快感，至于语音控制，就还需等待了。 其次，以米家设备为例，同是网关，HASS 可以控制夜灯功能，获取光感数据，Homekit 则不能；而针对扫地机器人，HASS 的接入方法十分复杂，且现阶段只能实现开关功能，HB 的插件安装配置更为容易，且可以控制吸力……可以说两个平台之间没有绝对的胜者，都需要具体情况具体分析。个人认为大多数情况下，HASS 对设备的支持更好，并且基于社群支持，跟进速度也更快。 在这里再次提醒初学者：二者必取其一，同一设备请通过一个平台接入，否则将产生冲突。 对于已经将设备通过 HB 接入，但想转入 HASS 平台的派友，这里提供如下兼容方案： 在 HASS 接入相关设备，详见上文。 在 HASS 主页面侧边栏，点击下方 “&lt;&gt;”，获取设备的 entity ID： 在 HASS configuration.yaml 配置文件中添加如下设置： 则该设备将在 Homebridge 中被隐藏，重启后不会被 家庭 App 重复识别添加。 此时，你可以通过 Apple Homekit 和 Hass 平台同时控制该设备。 设备追踪设置HASS 可以追踪同一路由器内网设备联网状态，我们转换一下思路，便可以利用这个系统判断家人是否在家等，非常方便。 我的路由器是 ASUS AC66U-B1，HASS 原生支持大部分品牌的路由器，包括小米路由器、TP-LINK 等。不同的路由器对应配置方法不同，具体请大家前往 官网 查询。设置前需要打开路由器的 SSH 模式，请大家设置好密码等，保护数据安全。建议设置仅限 LAN 用户拥有 SSH 权限。 打开configuration.yaml文件，末尾添加： 123456789101112device_tracker: - platform: asuswrt （按需填写，小米为“xiaomi”，Netgear为“netgear”，TP-LINK为“tplink”） host: 192.168.xx.1 #路由器Ip username: ***** #管理员账号 password: ****** #管理员密码 track_new_devices: no #是否自动添加新设备 不出意外，重启 HASS 后，主文件夹下便会自动生成 known_devices.yaml 文件，打开之后你会发现，系统已经自动为嗅探到的连接到路由器的设备添加了默认配置： 12345678devicename: name: Friendly Name #昵称 mac: EA:AA:55:E7:C6:94 #mac地址 picture: https://home-assistant.io/images/favicon-192x192.png #图片 icon: mdi:human-female #图标，和图片取一个设置 track: yes #是否追踪 hide_if_away: no #离开后是否自动隐藏 在接下来的教程中，我将指导大家如何进行自动化配置，真正实现人工智能，摆脱遥控的束缚、更换主题，展现个性、设置简洁大方的控制面板等等等等 敬请期待~ Changelog 8.5 更改 config.json 设置路径，增加删除 HB 缓存方法。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Home Assistant 系列基础篇 - 系统安装]]></title>
    <url>%2FHome-Assistant%2FHomeAssistant-Installation%2F</url>
    <content type="text"><![CDATA[Home Assistant 是一个成熟完整的基于 Python 的智能家居系统，设备支持度高，支持自动化（Automation)、群组化（Group）、UI 客制化（Theme) 等等高度定制化设置。背后又有庞大的社群基础，且不断在更新。最重要的是我们可以通过 Homeassistant-homebridge 插件打通两个平台，同样实现设备的 Siri 控制。整套体系的框架如下： 可以看出，Home Assistant 作为接入所有智能家居设备的「平台」，通过 Homebridge 这一「桥梁」，最终实现 iOS 及 macOS 设备对智能家居的设置。 我们知道 Homebridge 本身可以接入部分原生不支持 Apple Homekit 的设备，但由于 Homekit 本身的局限性，“桥梁”再强大，也无法逾越其极限。 打个比方来说，每个人都能单独过桥到对岸，但是速度始终有限，如果我们把人装进车里一起运送过桥，效率则更高，同时多了车内这么一个空间。这里的“车”就可以看作是 HASS。 HASS 本身作为一个独立的平台，有能力集成大量量产或 DIY 的智能家居设备，并且拥有独立的控制前端，在层级上来说是和 Appple Home 平台平起平坐的大 Boss。换言之，通过 HB 接入 Homekit 只是这个平台应用的一部分，对于其他非 Apple 生态用户，HASS 也同样给予其完整丰富的智能家居体验。 本系列将围绕安装、配置、开发等内容，详细介绍 HASS 平台的方方面面，同时针对 HASS 与 HB 兼容与选择，自动化配置方法等等问题给出自己的观点和探索，希望可以给大家玩转智能家居带来新的启发和收获。 HASS 支持大部分平台，包括 Docker、macOS、Linux、Windows等。简而言之，只要你的主机能跑 Python，基本就能安装 HASS。配合「魔镜」项目，以及便捷性的考虑，我选择的平台是树莓派 3，本系列教程也将基于树莓派展开。 初始安装在树莓派安装 HASS，有 3 种方法供选择： 以其他操作系统（这里以树莓派官方系统 Raspbian 为例）为根系统，再通过指令安装； 直接安装集成了 HASS 的 Hassbian 操作系统； 直接安装最新高度集成系统 Hass.io。 以上 3 种方法从性能上来说并无二异，均能实现 HASS 全部功能，Hassbian 实际上亦基于 Raspbian ，唯一需要纳入考虑的是图形化操作界面的需求。由于树莓派基金会官方尚未公开单独安装图形化操作界面的方法，在当下，如果有该需求，只能通过官方图形化操作系统 Raspbian with Desktop 实现。 对于刚入门的新手和想摆脱大量代码的朋友，方法推荐度依次为：3 &gt; 2 &gt; 1。 下述教程将讲解方法 1 及 方法 2 的安装方法，方法 3 的具体安装方法欢迎参考 『Hass.io 特别篇』。 近期，Raspbian 正在经历 Jessie 至 Stretch 的大版本更新，Home Assistant 同样正在进行 Python 3.5 的兼容工作。因此，当下的程序包、依赖包可能出现兼容性问题。我将跟随『树莓派基金会』以及『HA』的官方说明和文档，及时更新教程。希望大家在安装过程中遇到问题不要着急，举一反三，勤搜索，多提问。 方法 1 （Raspbian）安装前，请参考其他教程对树莓派进行初始基础设置，重点关注地区、WiFi、源替换的内容，这里不再展开。 注意：1. 2016 年 11 月后的官方系统默认关闭 SSH 功能，请务必打开；2. 如果使用 Stretch 系统，请将中文源中的『Jessie』改为『Stretch』，否则安装包版本不正确；3. 近期国内大学网络访问可能有问题，推荐使用『阿里云』等非大学源。 使用任何方法连接到树莓派终端，输入以下安装代码，请整段复制粘贴： 1curl -O https://raw.githubusercontent.com/home-assistant/fabric-home-assistant/master/hass_rpi_installer.sh &amp;&amp; sudo chown pi:pi hass_rpi_installer.sh &amp;&amp; bash hass_rpi_installer.sh 注意：不要以 sudo 运行，然后泡杯茶，做点别的事情，等待程序跑完。安装时间根据网络情况不等，大约需要 1 - 2 个小时，国内网络环境请大家自行改善。 如果你是使用此方法安装 HASS 的话，未来更新指令如下： 1234sudo su -s /bin/bash homeassistantsource /srv/homeassistant/homeassistant_venv/bin/activatepip3 install --upgrade homeassistant -i http://pypi.doubanio.com/simple exit 方法 2 （Hassbian）首先参考其他教程使用 Etcher 刷入官方最新固件镜像。我本人转存了一份，欢迎 前往下载。 最新 1.3 版 Hassbian 已伴随 Raspbian 更新至 Debian Stretch，部分软件包尚未完全跟进更新。求稳的朋友建议安装 1.23 版。 要注意的是，Hassbian 初次启动时需要联网进行原始设置，因此请保证树莓派在有网（有线/无线）环境下。初始 WIFI 设置： 将 TF 卡通过读卡器插入电脑； 打开 TF 卡 /boot/wpa_supplicant.conf 文件； 添加如下设置，保存： 12345 network=&#123; ssid=&quot;WIFI 名&quot; psk=&quot;WIFI 密码&quot; key_mgmt=WPA-PSK #加密方式，一般为WPA-PSK或WPA2-PSK&#125; 官方教程告知初次启动需要等待 5 分钟左右，基于国内的网络环境，我这里测试多次，都需要等待近 10 分钟方可，所以大家不要焦躁，可以看部番剧或者往下研究一下此篇文章以便接下来顺利进展。 如果等待时间过久却没有出现初始界面，可尝试使用以下命令强制初始安装： 12sudo systemctl enable install_homeassistant.servicesudo systemctl start install_homeassistant.service 如果使用此方法，未来更新指令如下： 123456sudo systemctl stop home-assistant@homeassistant.servicesudo su -s /bin/bash homeassistantsource /srv/homeassistant/bin/activatepip3 install --upgrade homeassistant -i https://http://pypi.doubanio.com/simple exitsudo systemctl start home-assistant@homeassistant.service 方法 3（Hass.io）此方法目前只适用于全系列树莓派及 Intel NUC，关于 Hass.io 更深入的介绍详见『Hass.io 特别篇』。 同样，请参考 copriwolf 的 教程 使用 Etcher 安装官方最新 固件镜像。（按需选择合适固件） 需要设置WIFI链接的朋友，请修改 TF 卡下 /system-connections/resin-sample 文件 之后将 TF 卡插入树莓派，在树莓派联网状态下，等待 10 - 20 分钟左右，系统将自动完成安装。 使用前 2 种方法的朋友，等待过后，在其他设备的浏览器输入：http://树莓派的ip地址:8123（查找树莓派 IP 地址可以直接前往路由器界面）。 安装 Hass.io 的朋友，等待过后，在其他设备的浏览器输入：http://hassio.local:8123。 如果出现类似下图，则表示初始安装完成；如若没有出现界面，或者无法连接，有很大可能是尚未安装完毕，不要着急再等等。（注意地址冒号为英文字符，请勿输入中文冒号）。 特别提醒：请确保出现以下界面后，再进行后续操作，否则你的一切工作都是前功尽弃。初次启动时，勿进行任何额外操作，保持树莓派通电、联网、静置状态！非常重要！ 附加功能安装以下教程不适用于 Hass.io，Hass.io 对附加功能使用模块式一键安装方法，大家可以登录主界面左侧栏的 Hass.io 项下进行点击安装。基于系统才刚发布，更多信息详见『Hass.io 特别篇』。 SMB（ 强烈建议）SMB 可以帮助我们开启树莓派的网盘模式，方便未来文件传输。 通用安装指令： 123sudo apt-get install samba sudo smbpasswd -a homeassistant -nsudo nano /etc/samba/smb.conf 复制粘贴以下内容： 1234567891011121314151617181920212223[global]netbios name = raspberrypiserver string = The Pi File Centerworkgroup = WORKGROUPhosts allow =remote announce =remote browse sync =[HOME ASSISTANT]path = /home/homeassistant/.homeassistantcomment = No commentbrowsable = yesread only = novalid users =writable = yesguest ok = yespublic = yescreate mask = 0777directory mask = 0777force user = homeassistantforce create mode = 0777force directory mode = 0777hosts allow = Ctrl+X，Y，回车。保存配置，之后再重启 smb 服务。 sudo service smbd restart Hassbian 提供了一个附加功能工具包 hassbian-config ，这使我们的安装更加简便。使用工具包安装原则上已经自动配置好一切，建议大家还是修改一下权限和密码。 注意：Hassbian工具包仅限使用 Hassian 用户使用。（下同） 安装指令： 12sudo hassbian-config install sambasudo smbpasswd -a pi 重启服务 1sudo systemctl restart home-assistant@homeassistant.service MQTT &amp; OpenZWaveMQTT 是基于二进制消息的发布、订阅编程模式的消息协议，广泛用于物联网部署中。同样 Z-wave 也是普遍用于物联网中的短距离无线通信技术。部分智能家居设备需要 MQTT 和 Z-Wave 传输信息。 All-in-one 安装指令已经安装了 MQTT 和 OpenZwave 服务，故无需重复安装。 Hassbian 用户请使用 Hassbian 工具包安装： 12sudo hassbian-config install mosquittosudo hassbian-config install openzwave-pip Homebridge 安装该步骤仅适用于 Apple 生态链用户，特别是想要通过 家庭 app 及 Siri 控制智能家居设备的用户。其他平台用户可跳过。 在文章开头，我已经简要介绍了 HASS 和 HB 的区别。我们在这里安装 HB 的目的在于通过 HB 打通 HASS 和 Apple Home 两大平台，实现联动。 我们知道 HB 本身可通过安装插件的方式接入部分设备，有时候同个设备同时支持 HB 插件和 HASS，也有部分用户已经配置好了 HB 但现在想转入 HASS，因此产生质疑。 这里我做一个说明：桥梁和平台分工不同，不可能产生冲突，也就是原有 HB 配置当然可以保留。但是仅使用 HB 就是将设备直接接入 Apple Home 这个平台，而如果设备同时接入了同样是平台的 HASS，那么平台之间就会产生冲突，导致设备被重复识别添加。当然，我们可以进行进一步的设置避免这一点，我将在未来的 『设备接入篇』 中详细介绍。 对于初学者，我建议一个设备仅连接一个平台使用，即要么单接入 HA，要么通过安装 HB 插件的方式单接入 Apple Home。 HB 的详细安装流程我就不多言了，欢迎大家参考其他教程。这里我根据之前指导他人的经验简单概括一下： HB 提供一行安装指令：sudo npm install -g --unsafe-perm homebridge，但是安装成功率比较低，推荐大家使用下面的手动安装指令。 注意：以下指令仅适用于树莓派 3B，2B 用户无法使用。 123456789101112sudo apt-get install git makesudo apt-get install g++curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejssudo apt-get install libavahi-compat-libdnssd-devsudo npm install -g --unsafe-perm homebridge hap-nodejs node-gypcd /usr/local/lib/node_modules/homebridge/（注意这里如果显示不存在文件夹，替换成 cd /usr/lib/node_modules/homebridge/)sudo npm install --unsafe-perm bignumcd /usr/local/lib/node_modules/hap-nodejs/node_modules/mdns（注意这里如果显示不存在文件夹，替换成 cd /usr/lib/node_modules/hap-nodejs/node_modules/mdns）sudo node-gyp BUILDTYPE=Release rebuild 安装完成后，建议大家直接输入homebridge运行一次 HB，以生成示例配置文件，然后 Ctrl + C 退出。 接着，安装 Homeassistant-homebridge 插件，实现平台联动： 1sudo npm install -g homebridge-homeassistant 日后插件更新，请使用下列指令： 1sudo npm upgrade -g homebridge-homeassistant 加速技巧： 由于某些原因，国内连接 npmjs.org 会十分缓慢，我们可以用淘宝 npm 镜像来代替。 输入下列指令： 1npm config set registry https://registry.npm.taobao.org 之后，所有安装流程一致。 另外国内加载默认 pypi 源的速度亦较慢，可在 pip install xxx 命令后添加 -i https://pypi.doubanio.com/simple/ 切换为豆瓣源提速。 添加自启任务忙活了那么久，即将大功告成了。HA 在安装过程中已经自行添加了自启任务，现在我们只需要把 HB 添加至树莓派开机任务中，这样每次启动后就会自动运行上述 2 个进程。 注意：配置 HB 前程序会运行错误，提示缺少配置文件，可先不理会。 12cd /etc/defaultsudo nano homebridge 复制粘贴 123# Defaults / Configuration options for homebridge# The following settings tells homebridge where to find the config.json file and where to persist the data (i.e. pairing and others)HOMEBRIDGE_OPTS= /home/pi/.homebridge Ctrl+X，Y，回车 所有带有 # 字的行皆为注释，可整行删除不影响。上述指令的作用是指定 Homebridge 的配置文件及缓存所在文件夹。 如果你想要 Homebridge 显示更详细的日志，可以继续添加如下字段 DEBUG=*之后 Ctrl+X，Y，回车。继续输入： 12cd /etc/systemd/systemsudo nano homebridge.service 复制粘贴 12345678910111213[Unit]Description=Node.js HomeKit Server After=syslog.target network-online.target[Service]Type=simpleUser=homebridgeEnvironmentFile=/etc/default/homebridgeExecStart=/usr/lib/node_modules/homebridge/bin/homebridge $HOMEBRIDGE_OPTSRestart=on-failureRestartSec=10KillMode=process[Install]WantedBy=multi-user.target Ctrl+X，Y，回车 123456cd /sudo systemctl daemon-reloadsudo systemctl enable homebridgesudo systemctl start homebridgesudo systemctl status homebridgesudo systemctl enable mosquitto 最后重启：sudo reboot OK，重启过后，一切就绪。 我将在下一篇「设备接入篇」中继续介绍如何将智能家居设备接入 HASS 。]]></content>
      <categories>
        <category>Home Assistant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[小抱怨]]></title>
    <url>%2Fother%2Fcomplaint%2F</url>
    <content type="text"><![CDATA[前几日，发生了一件颇为不快的事情。如果熟悉之前 Pin 作者钟颖和锤子有关 Big Bang 事件的话，会发现这件事有些眼熟。 HA 当中的高德地图的接入，我理所应当是原创者。我在博客和『少数派』上发布相关教程后，之后的一天我逛着 HA 论坛的时候，发现被转载了。 虽然说转载者 A 附上了原创链接，但是从始至终未告知我。论坛不管盈利与否，从法理上依旧应该被定义为商业论坛。当然，A 在我的代码基础之上做了修改，修改的内容就是替换了一个 URL，从而可以显示交通态势。此后，简化了我的教程，增加了一些步骤，之后就发布了，自然获得了不少积分。 论坛的积分和灌水评论自然我并不上心，但是这个行为，已经令我感到些微愤怒。 又过了几天，有其他的有能力的坛友 C 出来，较大幅度地更改了代码，这本是一件令人喜悦的事情，我也非常乐见其成。但是他在发帖时加了这么一句 “原作者 A …………” 实话说，我看到这句话的时候，真是吃了 X 的感觉，只想开骂“我去你 XXXXXX”。 冷静下来，我知道他只在论坛活动，看到 A 发了贴，做了一个小改动，自然认为 A 是原创者，致谢也不置可否。 但是，这个世界怕不是只有论坛吧？演绎作品作者有义务 credit 前面每一个作者，注意是义务，不是可有可无的权利。 我的改动确实从成果上看，也无非是一句 URL。 但是，请问你们知道提过想法，实践多次，学习框架，甚至留意到替换 MD5 的整个过程的不容易吗？你们知道，这个想法和实践，是全球使用 Home Assistant 的用户和开发者的首创吗？ 如果套用别人的成果，更换一个表面的东西，就能被称为原创者，普天之下，谁还愿意去创作？！ 这也是我在“钟颖事件”一开始就站队钟颖的重要原因，因为锤子太不要脸了，因为如果今天你不替别人出头，明天事情就会落在你头上。 『知乎』里，很多人评价说『创意不值钱』，为锤子开脱。创意也许确实不值钱，但是价值不是只能用金钱来衡量的。 和钟颖不一样，这次事件里我们大家都不靠这个吃饭，业余时间折腾，然而爱好是用来享受的，不是用来受气的。 更重要的是，这种事情多了，环境有了，整个社会的创新积极性就会急剧下降，现状，已经有此迹象。 事件，我已经将想法告知了 C 和论坛的管理员，他们后续什么操作，我亦无心追究了。 但是，忧虑，不得不说，依旧还在。]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
</search>
